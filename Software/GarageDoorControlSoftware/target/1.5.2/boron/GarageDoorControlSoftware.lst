
c:/Users/Matthew/Documents/GitHub/GarageDoorOpener/Software/GarageDoorControlSoftware/target/1.5.2/boron/GarageDoorControlSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000028a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d68c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e424  000d68c4  0001e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000364  2003e48c  2003e48c  0002e48c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d692c  000d692c  0002692c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6954  000d6954  00026954  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cf781  00000000  00000000  00026958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001108d  00000000  00000000  000f60d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d833  00000000  00000000  00107166  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025b8  00000000  00000000  00124999  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004368  00000000  00000000  00126f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037ce5  00000000  00000000  0012b2b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b900  00000000  00000000  00162f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106891  00000000  00000000  0018e89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cf8c  00000000  00000000  00295130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f9dd 	bl	d63f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f9e2 	bl	d6406 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e424 	.word	0x2003e424
   d404c:	000d68c4 	.word	0x000d68c4
   d4050:	2003e48c 	.word	0x2003e48c
   d4054:	2003e48c 	.word	0x2003e48c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 febf 	bl	d4de0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d68b4 	.word	0x000d68b4
   d4084:	000d6870 	.word	0x000d6870

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f83f 	bl	d4110 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 be65 	b.w	d4d64 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bc41 	b.w	d4920 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bc47 	b.w	d4930 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc45 	b.w	d4930 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
SFEVL53L1X distanceSensor;
//Uncomment the following line to use the optional shutdown and interrupt pins.
//SFEVL53L1X distanceSensor(Wire, SHUTDOWN_PIN, INTERRUPT_PIN);

void setup(void)
{
   d40b8:	b508      	push	{r3, lr}
  Wire.begin();
   d40ba:	f001 fafb 	bl	d56b4 <_Z19__fetch_global_Wirev>
   d40be:	f001 f8db 	bl	d5278 <_ZN7TwoWire5beginEv>

  Serial.begin(115200);
   d40c2:	f000 ff8d 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d40c6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40ca:	f000 ff7d 	bl	d4fc8 <_ZN9USBSerial5beginEl>
  Serial.println("VL53L1X Qwiic Test");
   d40ce:	f000 ff87 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d40d2:	490a      	ldr	r1, [pc, #40]	; (d40fc <setup+0x44>)
   d40d4:	f000 fcfd 	bl	d4ad2 <_ZN5Print7printlnEPKc>

  if (distanceSensor.begin() != 0) //Begin returns 0 on a good init
   d40d8:	4809      	ldr	r0, [pc, #36]	; (d4100 <setup+0x48>)
   d40da:	f000 fa23 	bl	d4524 <_ZN10SFEVL53L1X5beginEv>
   d40de:	b128      	cbz	r0, d40ec <setup+0x34>
  {
    Serial.println("Sensor failed to begin. Please check wiring. Freezing...");
   d40e0:	f000 ff7e 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d40e4:	4907      	ldr	r1, [pc, #28]	; (d4104 <setup+0x4c>)
   d40e6:	f000 fcf4 	bl	d4ad2 <_ZN5Print7printlnEPKc>
   d40ea:	e7fe      	b.n	d40ea <setup+0x32>
    while (1)
      ;
  }
  Serial.println("Sensor online!");
   d40ec:	f000 ff78 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d40f0:	4905      	ldr	r1, [pc, #20]	; (d4108 <setup+0x50>)
}
   d40f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    Serial.println("Sensor failed to begin. Please check wiring. Freezing...");
    while (1)
      ;
  }
  Serial.println("Sensor online!");
   d40f6:	f000 bcec 	b.w	d4ad2 <_ZN5Print7printlnEPKc>
   d40fa:	bf00      	nop
   d40fc:	000d648c 	.word	0x000d648c
   d4100:	2003e490 	.word	0x2003e490
   d4104:	000d649f 	.word	0x000d649f
   d4108:	000d64d8 	.word	0x000d64d8
   d410c:	00000000 	.word	0x00000000

000d4110 <loop>:
}

void loop(void)
{
   d4110:	b538      	push	{r3, r4, r5, lr}
  distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
   d4112:	4823      	ldr	r0, [pc, #140]	; (d41a0 <loop+0x90>)
   d4114:	f000 fa17 	bl	d4546 <_ZN10SFEVL53L1X12startRangingEv>
  while (!distanceSensor.checkForDataReady())
   d4118:	4821      	ldr	r0, [pc, #132]	; (d41a0 <loop+0x90>)
   d411a:	f000 fa1a 	bl	d4552 <_ZN10SFEVL53L1X17checkForDataReadyEv>
   d411e:	b918      	cbnz	r0, d4128 <loop+0x18>
  {
    delay(1);
   d4120:	2001      	movs	r0, #1
   d4122:	f000 fde1 	bl	d4ce8 <delay>
}

void loop(void)
{
  distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
  while (!distanceSensor.checkForDataReady())
   d4126:	e7f7      	b.n	d4118 <loop+0x8>
  {
    delay(1);
  }
  int distance = distanceSensor.getDistance(); //Get the result of the measurement from the sensor
   d4128:	481d      	ldr	r0, [pc, #116]	; (d41a0 <loop+0x90>)
   d412a:	f000 fa20 	bl	d456e <_ZN10SFEVL53L1X11getDistanceEv>
   d412e:	4604      	mov	r4, r0
  distanceSensor.clearInterrupt();
   d4130:	481b      	ldr	r0, [pc, #108]	; (d41a0 <loop+0x90>)
   d4132:	f000 fa05 	bl	d4540 <_ZN10SFEVL53L1X14clearInterruptEv>
  distanceSensor.stopRanging();
   d4136:	481a      	ldr	r0, [pc, #104]	; (d41a0 <loop+0x90>)
   d4138:	f000 fa08 	bl	d454c <_ZN10SFEVL53L1X11stopRangingEv>

  Serial.print("Distance(mm): ");
   d413c:	f000 ff50 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d4140:	4918      	ldr	r1, [pc, #96]	; (d41a4 <loop+0x94>)
   d4142:	f000 fcb3 	bl	d4aac <_ZN5Print5printEPKc>
  Serial.print(distance);
   d4146:	f000 ff4b 	bl	d4fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d414a:	220a      	movs	r2, #10
   d414c:	4621      	mov	r1, r4
   d414e:	f000 fcca 	bl	d4ae6 <_ZN5Print11printNumberEmh>

  float distanceInches = distance * 0.0393701;
  float distanceFeet = distanceInches / 12.0;

  Serial.print("\tDistance(ft): ");
   d4152:	f000 ff45 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d4156:	4914      	ldr	r1, [pc, #80]	; (d41a8 <loop+0x98>)
   d4158:	f000 fca8 	bl	d4aac <_ZN5Print5printEPKc>
  Serial.print(distanceFeet, 2);
   d415c:	f000 ff40 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d4160:	4605      	mov	r5, r0
   d4162:	4620      	mov	r0, r4
   d4164:	f001 fd88 	bl	d5c78 <__aeabi_i2d>
   d4168:	a30b      	add	r3, pc, #44	; (adr r3, d4198 <loop+0x88>)
   d416a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d416e:	f001 fde9 	bl	d5d44 <__aeabi_dmul>
   d4172:	f002 f8df 	bl	d6334 <__aeabi_d2f>
   d4176:	ee07 0a90 	vmov	s15, r0
   d417a:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
   d417e:	2102      	movs	r1, #2
   d4180:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d4184:	4628      	mov	r0, r5
   d4186:	f000 fd8d 	bl	d4ca4 <_ZN5Print5printEfi>

  Serial.println();
   d418a:	f000 ff29 	bl	d4fe0 <_Z16_fetch_usbserialv>
}
   d418e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  float distanceFeet = distanceInches / 12.0;

  Serial.print("\tDistance(ft): ");
  Serial.print(distanceFeet, 2);

  Serial.println();
   d4192:	f000 bc92 	b.w	d4aba <_ZN5Print7printlnEv>
   d4196:	bf00      	nop
   d4198:	57e16865 	.word	0x57e16865
   d419c:	3fa42851 	.word	0x3fa42851
   d41a0:	2003e490 	.word	0x2003e490
   d41a4:	000d64e7 	.word	0x000d64e7
   d41a8:	000d64f6 	.word	0x000d64f6

000d41ac <_GLOBAL__sub_I_distanceSensor>:
}
   d41ac:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41ae:	f000 f9fb 	bl	d45a8 <HAL_Pin_Map>
#include "vl53l1x_class.h"

class SFEVL53L1X
{
	public:
	SFEVL53L1X(TwoWire &i2cPort = Wire, int shutdownPin = -1, int interruptPin = -1); //Constructs our Distance sensor without an interrupt or shutdown pin
   d41b2:	f001 fa7f 	bl	d56b4 <_Z19__fetch_global_Wirev>

//Optional interrupt and shutdown pins.
#define SHUTDOWN_PIN 2
#define INTERRUPT_PIN 3

SFEVL53L1X distanceSensor;
   d41b6:	f04f 33ff 	mov.w	r3, #4294967295
   d41ba:	4601      	mov	r1, r0
   d41bc:	461a      	mov	r2, r3
   d41be:	4802      	ldr	r0, [pc, #8]	; (d41c8 <_GLOBAL__sub_I_distanceSensor+0x1c>)

  Serial.print("\tDistance(ft): ");
  Serial.print(distanceFeet, 2);

  Serial.println();
}
   d41c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

//Optional interrupt and shutdown pins.
#define SHUTDOWN_PIN 2
#define INTERRUPT_PIN 3

SFEVL53L1X distanceSensor;
   d41c4:	f000 b974 	b.w	d44b0 <_ZN10SFEVL53L1XC1ER7TwoWireii>
   d41c8:	2003e490 	.word	0x2003e490

000d41cc <_GLOBAL__sub_I_PIN_MAP2>:
// Return pointer to the library's pixel data buffer.  Use carefully,
// much opportunity for mayhem.  It's mostly for code that needs fast
// transfers, e.g. SD card to LEDs.  Color data is in BGR order.
uint8_t *Adafruit_DotStar::getPixels(void) const {
  return pixels;
}
   d41cc:	b508      	push	{r3, lr}
   d41ce:	f000 f9eb 	bl	d45a8 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // 3rd Gen Mesh Products Argon(12), Boron(13), or Xenon(14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d41d2:	f000 f9e9 	bl	d45a8 <HAL_Pin_Map>
   d41d6:	4b01      	ldr	r3, [pc, #4]	; (d41dc <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d41d8:	6018      	str	r0, [r3, #0]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	2003e4b0 	.word	0x2003e4b0

000d41e0 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   d41e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d41e2:	4604      	mov	r4, r0
   d41e4:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d41e6:	0849      	lsrs	r1, r1, #1
   d41e8:	6840      	ldr	r0, [r0, #4]
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   d41ea:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   d41ee:	461e      	mov	r6, r3
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d41f0:	f001 f879 	bl	d52e6 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   d41f4:	122b      	asrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   d41f6:	6860      	ldr	r0, [r4, #4]
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
	buffer[1] = RegisterAddr & 0xFF;
   d41f8:	f88d 5005 	strb.w	r5, [sp, #5]
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   d41fc:	f88d 3004 	strb.w	r3, [sp, #4]
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   d4200:	6803      	ldr	r3, [r0, #0]
   d4202:	2202      	movs	r2, #2
   d4204:	68db      	ldr	r3, [r3, #12]
   d4206:	a901      	add	r1, sp, #4
   d4208:	4798      	blx	r3
   d420a:	4635      	mov	r5, r6
	for (int i = 0; i < NumByteToWrite; i++)
   d420c:	1bab      	subs	r3, r5, r6
   d420e:	429f      	cmp	r7, r3
   d4210:	dd06      	ble.n	d4220 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x40>
		dev_i2c->write(pBuffer[i]);
   d4212:	6860      	ldr	r0, [r4, #4]
   d4214:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4218:	6803      	ldr	r3, [r0, #0]
   d421a:	689b      	ldr	r3, [r3, #8]
   d421c:	4798      	blx	r3
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
	for (int i = 0; i < NumByteToWrite; i++)
   d421e:	e7f5      	b.n	d420c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>
		dev_i2c->write(pBuffer[i]);

	dev_i2c->endTransmission(true);
   d4220:	2101      	movs	r1, #1
   d4222:	6860      	ldr	r0, [r4, #4]
   d4224:	f001 f863 	bl	d52ee <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   d4228:	2000      	movs	r0, #0
   d422a:	b003      	add	sp, #12
   d422c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d422e <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:

	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data)
{
   d422e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4230:	ac04      	add	r4, sp, #16
	int status;

	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   d4232:	7809      	ldrb	r1, [r1, #0]

	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data)
{
   d4234:	f804 3d01 	strb.w	r3, [r4, #-1]!
	int status;

	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   d4238:	2301      	movs	r3, #1
   d423a:	9300      	str	r3, [sp, #0]
   d423c:	4623      	mov	r3, r4
   d423e:	f7ff ffcf 	bl	d41e0 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
	return status;
}
   d4242:	b004      	add	sp, #16
   d4244:	bd10      	pop	{r4, pc}

000d4246 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:

VL53L1X_ERROR VL53L1X::VL53L1X_ClearInterrupt()
{
	VL53L1X_ERROR status = 0;

	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   d4246:	2301      	movs	r3, #1
   d4248:	2286      	movs	r2, #134	; 0x86
   d424a:	6981      	ldr	r1, [r0, #24]
   d424c:	f7ff bfef 	b.w	d422e <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000d4250 <_ZN7VL53L1X20VL53L1X_StartRangingEv>:

VL53L1X_ERROR VL53L1X::VL53L1X_StartRanging()
{
	VL53L1X_ERROR status = 0;

	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   d4250:	2340      	movs	r3, #64	; 0x40
   d4252:	2287      	movs	r2, #135	; 0x87
   d4254:	6981      	ldr	r1, [r0, #24]
   d4256:	f7ff bfea 	b.w	d422e <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000d425a <_ZN7VL53L1X19VL53L1X_StopRangingEv>:

VL53L1X_ERROR VL53L1X::VL53L1X_StopRanging()
{
	VL53L1X_ERROR status = 0;

	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   d425a:	2300      	movs	r3, #0
   d425c:	2287      	movs	r2, #135	; 0x87
   d425e:	6981      	ldr	r1, [r0, #24]
   d4260:	f7ff bfe5 	b.w	d422e <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000d4264 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:
	dev_i2c->endTransmission(true);
	return 0;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   d4264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4268:	4604      	mov	r4, r0
   d426a:	4690      	mov	r8, r2
   d426c:	461e      	mov	r6, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d426e:	084f      	lsrs	r7, r1, #1
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   d4270:	ea4f 2912 	mov.w	r9, r2, lsr #8
   d4274:	2505      	movs	r5, #5
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d4276:	4639      	mov	r1, r7
   d4278:	6860      	ldr	r0, [r4, #4]
   d427a:	f001 f834 	bl	d52e6 <_ZN7TwoWire17beginTransmissionEh>
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   d427e:	6860      	ldr	r0, [r4, #4]
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   d4280:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
   d4284:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
   d4288:	6803      	ldr	r3, [r0, #0]
   d428a:	a901      	add	r1, sp, #4
   d428c:	68db      	ldr	r3, [r3, #12]
   d428e:	2202      	movs	r2, #2
   d4290:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   d4292:	2100      	movs	r1, #0
   d4294:	6860      	ldr	r0, [r4, #4]
   d4296:	f001 f82a 	bl	d52ee <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   d429a:	b118      	cbz	r0, d42a4 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
   d429c:	3d01      	subs	r5, #1
{
	int status = 0;

	//Loop until the port is transmitted correctly
	uint8_t maxAttempts = 5;
	for (uint8_t x = 0; x < maxAttempts; x++)
   d429e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d42a2:	d1e8      	bne.n	d4276 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   d42a4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   d42a8:	6860      	ldr	r0, [r4, #4]
   d42aa:	4639      	mov	r1, r7
   d42ac:	f001 f818 	bl	d52e0 <_ZN7TwoWire11requestFromEhj>
   d42b0:	1e75      	subs	r5, r6, #1

	int i = 0;
	while (dev_i2c->available())
   d42b2:	6860      	ldr	r0, [r4, #4]
   d42b4:	6803      	ldr	r3, [r0, #0]
   d42b6:	691b      	ldr	r3, [r3, #16]
   d42b8:	4798      	blx	r3
   d42ba:	b130      	cbz	r0, d42ca <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
   d42bc:	6860      	ldr	r0, [r4, #4]
   d42be:	6803      	ldr	r3, [r0, #0]
   d42c0:	695b      	ldr	r3, [r3, #20]
   d42c2:	4798      	blx	r3
   d42c4:	f805 0f01 	strb.w	r0, [r5, #1]!
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);

	int i = 0;
	while (dev_i2c->available())
   d42c8:	e7f3      	b.n	d42b2 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		pBuffer[i] = dev_i2c->read();
		i++;
	}

	return 0;
}
   d42ca:	b003      	add	sp, #12
   d42cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d42d0 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 4);
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data)
{
   d42d0:	b513      	push	{r0, r1, r4, lr}
	int status;

	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   d42d2:	2401      	movs	r4, #1
   d42d4:	7809      	ldrb	r1, [r1, #0]
   d42d6:	9400      	str	r4, [sp, #0]
   d42d8:	f7ff ffc4 	bl	d4264 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
   d42dc:	3000      	adds	r0, #0
   d42de:	bf18      	it	ne
   d42e0:	2001      	movne	r0, #1

	if (status)
		return -1;

	return 0;
}
   d42e2:	4240      	negs	r0, r0
   d42e4:	b002      	add	sp, #8
   d42e6:	bd10      	pop	{r4, pc}

000d42e8 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
	status = VL53L1_WrByte(Device, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_GetInterruptPolarity(uint8_t *pInterruptPolarity)
{
   d42e8:	b513      	push	{r0, r1, r4, lr}
	uint8_t Temp;
	VL53L1X_ERROR status = 0;

	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   d42ea:	2230      	movs	r2, #48	; 0x30
	status = VL53L1_WrByte(Device, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_GetInterruptPolarity(uint8_t *pInterruptPolarity)
{
   d42ec:	460c      	mov	r4, r1
	uint8_t Temp;
	VL53L1X_ERROR status = 0;

	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   d42ee:	f10d 0307 	add.w	r3, sp, #7
   d42f2:	6981      	ldr	r1, [r0, #24]
   d42f4:	f7ff ffec 	bl	d42d0 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	Temp = Temp & 0x10;
	*pInterruptPolarity = !(Temp >> 4);
   d42f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d42fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
   d4300:	f083 0301 	eor.w	r3, r3, #1
   d4304:	7023      	strb	r3, [r4, #0]
	return status;
}
   d4306:	b002      	add	sp, #8
   d4308:	bd10      	pop	{r4, pc}

000d430a <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_CheckForDataReady(uint8_t *isDataReady)
{
   d430a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d430c:	4605      	mov	r5, r0
   d430e:	460c      	mov	r4, r1
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;

	status = VL53L1X_GetInterruptPolarity(&IntPol);
   d4310:	f10d 0107 	add.w	r1, sp, #7
   d4314:	f7ff ffe8 	bl	d42e8 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   d4318:	f10d 0306 	add.w	r3, sp, #6
   d431c:	2231      	movs	r2, #49	; 0x31
   d431e:	69a9      	ldr	r1, [r5, #24]
   d4320:	4628      	mov	r0, r5
   d4322:	f7ff ffd5 	bl	d42d0 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	/* Read in the register to check if a new value is available */
	if (status == 0)
   d4326:	b950      	cbnz	r0, d433e <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
	{
		if ((Temp & 1) == IntPol)
   d4328:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d432c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4330:	f003 0301 	and.w	r3, r3, #1
   d4334:	429a      	cmp	r2, r3
			*isDataReady = 1;
   d4336:	bf06      	itte	eq
   d4338:	2301      	moveq	r3, #1
   d433a:	7023      	strbeq	r3, [r4, #0]
		else
			*isDataReady = 0;
   d433c:	7020      	strbne	r0, [r4, #0]
	}
	return status;
}
   d433e:	b003      	add	sp, #12
   d4340:	bd30      	pop	{r4, r5, pc}
	...

000d4344 <_ZN7VL53L1X18VL53L1X_SensorInitEv>:

	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_SensorInit()
{
   d4344:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L1X_ERROR status = 0;
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   d4346:	2500      	movs	r5, #0

	for (Addr = 0x2D; Addr <= 0x87; Addr++)
	{
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   d4348:	4e1c      	ldr	r6, [pc, #112]	; (d43bc <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
}

VL53L1X_ERROR VL53L1X::VL53L1X_SensorInit()
{
	VL53L1X_ERROR status = 0;
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   d434a:	f88d 5007 	strb.w	r5, [sp, #7]

	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_SensorInit()
{
   d434e:	4604      	mov	r4, r0
	VL53L1X_ERROR status = 0;
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;

	for (Addr = 0x2D; Addr <= 0x87; Addr++)
	{
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   d4350:	f105 022d 	add.w	r2, r5, #45	; 0x2d
   d4354:	5d73      	ldrb	r3, [r6, r5]
   d4356:	69a1      	ldr	r1, [r4, #24]
   d4358:	b292      	uxth	r2, r2
   d435a:	4620      	mov	r0, r4
   d435c:	3501      	adds	r5, #1
   d435e:	f7ff ff66 	bl	d422e <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
VL53L1X_ERROR VL53L1X::VL53L1X_SensorInit()
{
	VL53L1X_ERROR status = 0;
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;

	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   d4362:	2d5b      	cmp	r5, #91	; 0x5b
   d4364:	d1f4      	bne.n	d4350 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xc>
	{
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
	}
	status = VL53L1X_StartRanging();
   d4366:	4620      	mov	r0, r4
   d4368:	f7ff ff72 	bl	d4250 <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   d436c:	2598      	movs	r5, #152	; 0x98

	//We need to wait at least the default intermeasurement period of 103ms before dataready will occur
	//But if a unit has already been powered and polling, it may happen much faster
	while (dataReady == 0)
   d436e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4372:	b963      	cbnz	r3, d438e <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
	{
		status = VL53L1X_CheckForDataReady(&dataReady);
   d4374:	f10d 0107 	add.w	r1, sp, #7
   d4378:	4620      	mov	r0, r4
   d437a:	3d01      	subs	r5, #1
   d437c:	f7ff ffc5 	bl	d430a <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   d4380:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4384:	d016      	beq.n	d43b4 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x70>
			return VL53L1_ERROR_TIME_OUT;
		delay(1);
   d4386:	2001      	movs	r0, #1
   d4388:	f000 fcae 	bl	d4ce8 <delay>
	}
	status = VL53L1X_StartRanging();

	//We need to wait at least the default intermeasurement period of 103ms before dataready will occur
	//But if a unit has already been powered and polling, it may happen much faster
	while (dataReady == 0)
   d438c:	e7ef      	b.n	d436e <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
		status = VL53L1X_CheckForDataReady(&dataReady);
		if (timeout++ > 150)
			return VL53L1_ERROR_TIME_OUT;
		delay(1);
	}
	status = VL53L1X_ClearInterrupt();
   d438e:	4620      	mov	r0, r4
   d4390:	f7ff ff59 	bl	d4246 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   d4394:	4620      	mov	r0, r4
   d4396:	f7ff ff60 	bl	d425a <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   d439a:	69a1      	ldr	r1, [r4, #24]
   d439c:	2309      	movs	r3, #9
   d439e:	2208      	movs	r2, #8
   d43a0:	4620      	mov	r0, r4
   d43a2:	f7ff ff44 	bl	d422e <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   d43a6:	2300      	movs	r3, #0
   d43a8:	220b      	movs	r2, #11
   d43aa:	69a1      	ldr	r1, [r4, #24]
   d43ac:	4620      	mov	r0, r4
   d43ae:	f7ff ff3e 	bl	d422e <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	return status;
   d43b2:	e001      	b.n	d43b8 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x74>
	//But if a unit has already been powered and polling, it may happen much faster
	while (dataReady == 0)
	{
		status = VL53L1X_CheckForDataReady(&dataReady);
		if (timeout++ > 150)
			return VL53L1_ERROR_TIME_OUT;
   d43b4:	f06f 0006 	mvn.w	r0, #6
	status = VL53L1X_ClearInterrupt();
	status = VL53L1X_StopRanging();
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
	return status;
}
   d43b8:	b002      	add	sp, #8
   d43ba:	bd70      	pop	{r4, r5, r6, pc}
   d43bc:	000d6506 	.word	0x000d6506

000d43c0 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:

	return 0;
}

VL53L1X_ERROR VL53L1X::VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data)
{
   d43c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d43c2:	461c      	mov	r4, r3
	int status;
	uint8_t buffer[2] = {0, 0};
   d43c4:	2300      	movs	r3, #0
   d43c6:	f88d 300c 	strb.w	r3, [sp, #12]
   d43ca:	f88d 300d 	strb.w	r3, [sp, #13]

	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   d43ce:	2302      	movs	r3, #2
   d43d0:	7809      	ldrb	r1, [r1, #0]
   d43d2:	9300      	str	r3, [sp, #0]
   d43d4:	ab03      	add	r3, sp, #12
   d43d6:	f7ff ff45 	bl	d4264 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   d43da:	b930      	cbnz	r0, d43ea <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x2a>
	{
		*data = (buffer[0] << 8) + buffer[1];
   d43dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d43e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d43e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43e8:	8023      	strh	r3, [r4, #0]
	}
	return status;
}
   d43ea:	b004      	add	sp, #16
   d43ec:	bd10      	pop	{r4, pc}

000d43ee <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_GetSensorId(uint16_t *sensorId)
{
   d43ee:	b513      	push	{r0, r1, r4, lr}
	VL53L1X_ERROR status = 0;
	uint16_t tmp = 0;
   d43f0:	ab02      	add	r3, sp, #8
   d43f2:	2200      	movs	r2, #0
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_GetSensorId(uint16_t *sensorId)
{
   d43f4:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp = 0;
   d43f6:	f823 2d02 	strh.w	r2, [r3, #-2]!

	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   d43fa:	6981      	ldr	r1, [r0, #24]
   d43fc:	f240 120f 	movw	r2, #271	; 0x10f
   d4400:	f7ff ffde 	bl	d43c0 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   d4404:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4408:	8023      	strh	r3, [r4, #0]
	return status;
}
   d440a:	b002      	add	sp, #8
   d440c:	bd10      	pop	{r4, pc}

000d440e <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:

VL53L1X_ERROR VL53L1X::VL53L1X_GetDistance(uint16_t *distance)
{
   d440e:	b513      	push	{r0, r1, r4, lr}
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status = (VL53L1_RdWord(Device,
							VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
   d4410:	2296      	movs	r2, #150	; 0x96
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1X_GetDistance(uint16_t *distance)
{
   d4412:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status = (VL53L1_RdWord(Device,
							VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
   d4414:	f10d 0306 	add.w	r3, sp, #6
   d4418:	6981      	ldr	r1, [r0, #24]
   d441a:	f7ff ffd1 	bl	d43c0 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   d441e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4422:	8023      	strh	r3, [r4, #0]
	return status;
}
   d4424:	b002      	add	sp, #8
   d4426:	bd10      	pop	{r4, pc}

000d4428 <_GLOBAL__sub_I__ZN7VL53L1X20VL53L1X_GetSWVersionEP17VL53L1X_Version_t>:
   d4428:	f000 b8be 	b.w	d45a8 <HAL_Pin_Map>

000d442c <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   d442c:	4770      	bx	lr

000d442e <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   d442e:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   d4430:	6880      	ldr	r0, [r0, #8]
   d4432:	2800      	cmp	r0, #0
   d4434:	db03      	blt.n	d443e <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   d4436:	2100      	movs	r1, #0
   d4438:	b280      	uxth	r0, r0
   d443a:	f001 f908 	bl	d564e <digitalWrite>
       }
       delay(10);
   d443e:	200a      	movs	r0, #10
    }
   d4440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
       if(gpio0 >= 0)
       {
         digitalWrite(gpio0, LOW);
       }
       delay(10);
   d4444:	f000 bc50 	b.w	d4ce8 <delay>

000d4448 <_ZN7VL53L1X9VL53L1_OnEv>:
	/**
	 * @brief       PowerOn the sensor
	 * @return      void
	 */
    /* turns on the sensor */
    virtual void VL53L1_On(void)
   d4448:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   d444a:	6880      	ldr	r0, [r0, #8]
   d444c:	2800      	cmp	r0, #0
   d444e:	db03      	blt.n	d4458 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
       {
         digitalWrite(gpio0, HIGH);
   d4450:	2101      	movs	r1, #1
   d4452:	b280      	uxth	r0, r0
   d4454:	f001 f8fb 	bl	d564e <digitalWrite>
       }
       delay(10);
   d4458:	200a      	movs	r0, #10
    }
   d445a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
       if(gpio0 >= 0)
       {
         digitalWrite(gpio0, HIGH);
       }
       delay(10);
   d445e:	f000 bc43 	b.w	d4ce8 <delay>

000d4462 <_ZN7VL53L1XD0Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   d4462:	b510      	push	{r4, lr}
   d4464:	211c      	movs	r1, #28
   d4466:	4604      	mov	r4, r0
   d4468:	f001 f958 	bl	d571c <_ZdlPvj>
   d446c:	4620      	mov	r0, r4
   d446e:	bd10      	pop	{r4, pc}

000d4470 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   d4470:	b513      	push	{r0, r1, r4, lr}
   d4472:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   d4474:	f10d 0106 	add.w	r1, sp, #6
   d4478:	f7ff ffc9 	bl	d440e <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   d447c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4480:	6023      	str	r3, [r4, #0]
	return status;
    }
   d4482:	b002      	add	sp, #8
   d4484:	bd10      	pop	{r4, pc}

000d4486 <_ZN7VL53L1X6ReadIDEv>:
    }



    /* Read function of the ID device */
    virtual int ReadID(){
   d4486:	b507      	push	{r0, r1, r2, lr}
		uint16_t sensorId;
		VL53L1X_GetSensorId(&sensorId);
   d4488:	f10d 0106 	add.w	r1, sp, #6
   d448c:	f7ff ffaf 	bl	d43ee <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   d4490:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			return 0;
		return -1;
	}
   d4494:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   d4498:	1ac0      	subs	r0, r0, r3
   d449a:	bf18      	it	ne
   d449c:	f04f 30ff 	movne.w	r0, #4294967295
   d44a0:	b003      	add	sp, #12
   d44a2:	f85d fb04 	ldr.w	pc, [sp], #4

000d44a6 <_ZN7VL53L1X4InitEv>:
 *
 * @brief One time device initialization
 * @param void
 * @return     0 on success,  @a #CALIBRATION_WARNING if failed
 */
    virtual int Init()
   d44a6:	b508      	push	{r3, lr}
    {
       return VL53L1X_SensorInit();
   d44a8:	f7ff ff4c 	bl	d4344 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   d44ac:	bd08      	pop	{r3, pc}
	...

000d44b0 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   d44b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d44b4:	4605      	mov	r5, r0
   d44b6:	f04f 0852 	mov.w	r8, #82	; 0x52
   d44ba:	f8c0 800c 	str.w	r8, [r0, #12]
{
	_i2cPort = &i2cPort;
   d44be:	6029      	str	r1, [r5, #0]
	_shutdownPin = shutdownPin;
   d44c0:	606a      	str	r2, [r5, #4]
	_interruptPin = interruptPin;
   d44c2:	60ab      	str	r3, [r5, #8]
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   d44c4:	201c      	movs	r0, #28
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   d44c6:	460f      	mov	r7, r1
   d44c8:	4616      	mov	r6, r2
   d44ca:	4699      	mov	r9, r3
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
	_interruptPin = interruptPin;
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   d44cc:	f7ff fde5 	bl	d409a <_Znwj>
   d44d0:	4604      	mov	r4, r0
   d44d2:	b188      	cbz	r0, d44f8 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x48>
    /** Constructor
     * @param[in] &i2c device I2C to be used for communication
     * @param[in] &pin_gpio1 pin Mbed InterruptIn PinName to be used as component GPIO_1 INT
     * @param[in] DevAddr device address, 0x52 by default
     */
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   d44d4:	4b0a      	ldr	r3, [pc, #40]	; (d4500 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
   d44d6:	6086      	str	r6, [r0, #8]
   d44d8:	e880 0088 	stmia.w	r0, {r3, r7}
    {
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
       MyDevice.I2cHandle = i2c;
       Device = &MyDevice;
       if(gpio0 >= 0)
   d44dc:	2e00      	cmp	r6, #0
     */
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
    {
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
       MyDevice.I2cHandle = i2c;
       Device = &MyDevice;
   d44de:	f100 0310 	add.w	r3, r0, #16
    /** Constructor
     * @param[in] &i2c device I2C to be used for communication
     * @param[in] &pin_gpio1 pin Mbed InterruptIn PinName to be used as component GPIO_1 INT
     * @param[in] DevAddr device address, 0x52 by default
     */
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   d44e2:	f8c0 900c 	str.w	r9, [r0, #12]
    {
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   d44e6:	f880 8010 	strb.w	r8, [r0, #16]
       MyDevice.I2cHandle = i2c;
   d44ea:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   d44ec:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   d44ee:	db03      	blt.n	d44f8 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x48>
       {
         pinMode(gpio0, OUTPUT);
   d44f0:	2101      	movs	r1, #1
   d44f2:	b2b0      	uxth	r0, r6
   d44f4:	f001 f89a 	bl	d562c <pinMode>
   d44f8:	612c      	str	r4, [r5, #16]
}
   d44fa:	4628      	mov	r0, r5
   d44fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4500:	000d656c 	.word	0x000d656c

000d4504 <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
   d4504:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
   d4506:	f10d 0106 	add.w	r1, sp, #6
   d450a:	6900      	ldr	r0, [r0, #16]
   d450c:	f7ff ff6f 	bl	d43ee <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
   d4510:	f8bd 0006 	ldrh.w	r0, [sp, #6]
		return true;
	return false;
}
   d4514:	f64e 23cc 	movw	r3, #60108	; 0xeacc
   d4518:	1ac3      	subs	r3, r0, r3
   d451a:	4258      	negs	r0, r3
   d451c:	4158      	adcs	r0, r3
   d451e:	b003      	add	sp, #12
   d4520:	f85d fb04 	ldr.w	pc, [sp], #4

000d4524 <_ZN10SFEVL53L1X5beginEv>:
{
	return _device->VL53L1X_SensorInit();
}

bool SFEVL53L1X::begin()
{
   d4524:	b510      	push	{r4, lr}
   d4526:	4604      	mov	r4, r0
	if (checkID() == false)
   d4528:	f7ff ffec 	bl	d4504 <_ZN10SFEVL53L1X7checkIDEv>
   d452c:	b130      	cbz	r0, d453c <_ZN10SFEVL53L1X5beginEv+0x18>
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);

	return _device->VL53L1X_SensorInit();
   d452e:	6920      	ldr	r0, [r4, #16]
   d4530:	f7ff ff08 	bl	d4344 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
   d4534:	3000      	adds	r0, #0
   d4536:	bf18      	it	ne
   d4538:	2001      	movne	r0, #1
   d453a:	bd10      	pop	{r4, pc}
}

bool SFEVL53L1X::begin()
{
	if (checkID() == false)
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
   d453c:	2001      	movs	r0, #1

	return _device->VL53L1X_SensorInit();
}
   d453e:	bd10      	pop	{r4, pc}

000d4540 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
   d4540:	6900      	ldr	r0, [r0, #16]
   d4542:	f7ff be80 	b.w	d4246 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

000d4546 <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   d4546:	6900      	ldr	r0, [r0, #16]
   d4548:	f7ff be82 	b.w	d4250 <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000d454c <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   d454c:	6900      	ldr	r0, [r0, #16]
   d454e:	f7ff be84 	b.w	d425a <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000d4552 <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
   d4552:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
   d4554:	f10d 0107 	add.w	r1, sp, #7
   d4558:	6900      	ldr	r0, [r0, #16]
   d455a:	f7ff fed6 	bl	d430a <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
   d455e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   d4562:	3000      	adds	r0, #0
   d4564:	bf18      	it	ne
   d4566:	2001      	movne	r0, #1
   d4568:	b003      	add	sp, #12
   d456a:	f85d fb04 	ldr.w	pc, [sp], #4

000d456e <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
   d456e:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
   d4570:	f10d 0106 	add.w	r1, sp, #6
   d4574:	6900      	ldr	r0, [r0, #16]
   d4576:	f7ff ff4a 	bl	d440e <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
   d457a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d457e:	b003      	add	sp, #12
   d4580:	f85d fb04 	ldr.w	pc, [sp], #4

000d4584 <_GLOBAL__sub_I__ZN10SFEVL53L1XC2ER7TwoWireii>:
   d4584:	f000 b810 	b.w	d45a8 <HAL_Pin_Map>

000d4588 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <netdb_freeaddrinfo+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	689b      	ldr	r3, [r3, #8]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030268 	.word	0x00030268

000d4598 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <netdb_getaddrinfo+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	68db      	ldr	r3, [r3, #12]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030268 	.word	0x00030268

000d45a8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_Pin_Map+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	681b      	ldr	r3, [r3, #0]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	0003022c 	.word	0x0003022c

000d45b8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_Pin_Mode+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	689b      	ldr	r3, [r3, #8]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	0003022c 	.word	0x0003022c

000d45c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_Get_Pin_Mode+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	68db      	ldr	r3, [r3, #12]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	0003022c 	.word	0x0003022c

000d45d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_GPIO_Write+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	691b      	ldr	r3, [r3, #16]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003022c 	.word	0x0003022c

000d45e8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_SPI_Init+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	69db      	ldr	r3, [r3, #28]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030230 	.word	0x00030230

000d45f8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_SPI_Is_Enabled+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6a1b      	ldr	r3, [r3, #32]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030230 	.word	0x00030230

000d4608 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_RNG_GetRandomNumber+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	685b      	ldr	r3, [r3, #4]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030218 	.word	0x00030218

000d4618 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	695b      	ldr	r3, [r3, #20]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030218 	.word	0x00030218

000d4628 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <os_thread_is_current+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	689b      	ldr	r3, [r3, #8]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030248 	.word	0x00030248

000d4638 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <os_thread_join+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	691b      	ldr	r3, [r3, #16]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030248 	.word	0x00030248

000d4648 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <os_thread_cleanup+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	695b      	ldr	r3, [r3, #20]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030248 	.word	0x00030248

000d4658 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <os_mutex_recursive_create+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030248 	.word	0x00030248

000d4668 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <os_mutex_recursive_destroy+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030248 	.word	0x00030248

000d4678 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <inet_inet_ntop+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	695b      	ldr	r3, [r3, #20]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030264 	.word	0x00030264

000d4688 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <HAL_USART_Init+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	681b      	ldr	r3, [r3, #0]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003023c 	.word	0x0003023c

000d4698 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <HAL_USART_Write_Data+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	68db      	ldr	r3, [r3, #12]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003023c 	.word	0x0003023c

000d46a8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_USART_Available_Data+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	691b      	ldr	r3, [r3, #16]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003023c 	.word	0x0003023c

000d46b8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_USART_Read_Data+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	695b      	ldr	r3, [r3, #20]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003023c 	.word	0x0003023c

000d46c8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_USART_Peek_Data+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	699b      	ldr	r3, [r3, #24]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003023c 	.word	0x0003023c

000d46d8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <HAL_USART_Flush_Data+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	69db      	ldr	r3, [r3, #28]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003023c 	.word	0x0003023c

000d46e8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_USART_Is_Enabled+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6a1b      	ldr	r3, [r3, #32]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003023c 	.word	0x0003023c

000d46f8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <HAL_USART_Available_Data_For_Write+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003023c 	.word	0x0003023c

000d4708 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <HAL_I2C_Begin+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	68db      	ldr	r3, [r3, #12]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030228 	.word	0x00030228

000d4718 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <HAL_I2C_Begin_Transmission+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	699b      	ldr	r3, [r3, #24]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030228 	.word	0x00030228

000d4728 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <HAL_I2C_End_Transmission+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	69db      	ldr	r3, [r3, #28]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030228 	.word	0x00030228

000d4738 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_I2C_Write_Data+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6a1b      	ldr	r3, [r3, #32]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030228 	.word	0x00030228

000d4748 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_I2C_Available_Data+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030228 	.word	0x00030228

000d4758 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_I2C_Read_Data+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030228 	.word	0x00030228

000d4768 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_I2C_Peek_Data+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030228 	.word	0x00030228

000d4778 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_I2C_Flush_Data+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030228 	.word	0x00030228

000d4788 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <HAL_I2C_Is_Enabled+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030228 	.word	0x00030228

000d4798 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_I2C_Init+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030228 	.word	0x00030228

000d47a8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_I2C_Request_Data_Ex+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030228 	.word	0x00030228

000d47b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_USB_USART_Init+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	681b      	ldr	r3, [r3, #0]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	0003024c 	.word	0x0003024c

000d47c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_USB_USART_Begin+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	685b      	ldr	r3, [r3, #4]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003024c 	.word	0x0003024c

000d47d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_USB_USART_Available_Data+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	691b      	ldr	r3, [r3, #16]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003024c 	.word	0x0003024c

000d47e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	695b      	ldr	r3, [r3, #20]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	0003024c 	.word	0x0003024c

000d47f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <HAL_USB_USART_Receive_Data+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	699b      	ldr	r3, [r3, #24]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	0003024c 	.word	0x0003024c

000d4808 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_USB_USART_Send_Data+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	69db      	ldr	r3, [r3, #28]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003024c 	.word	0x0003024c

000d4818 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_USB_USART_Flush_Data+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6a1b      	ldr	r3, [r3, #32]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003024c 	.word	0x0003024c

000d4828 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <set_system_mode+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	685b      	ldr	r3, [r3, #4]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030220 	.word	0x00030220

000d4838 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <system_delay_ms+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	695b      	ldr	r3, [r3, #20]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030220 	.word	0x00030220

000d4848 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b03      	ldr	r3, [pc, #12]	; (d4858 <system_ctrl_set_app_request_handler+0x10>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4852:	9301      	str	r3, [sp, #4]
   d4854:	bd08      	pop	{r3, pc}
   d4856:	0000      	.short	0x0000
   d4858:	00030220 	.word	0x00030220

000d485c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b03      	ldr	r3, [pc, #12]	; (d486c <system_ctrl_set_result+0x10>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4866:	9301      	str	r3, [sp, #4]
   d4868:	bd08      	pop	{r3, pc}
   d486a:	0000      	.short	0x0000
   d486c:	00030220 	.word	0x00030220

000d4870 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <network_connect+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	685b      	ldr	r3, [r3, #4]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030240 	.word	0x00030240

000d4880 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <network_connecting+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	689b      	ldr	r3, [r3, #8]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030240 	.word	0x00030240

000d4890 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <network_disconnect+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	68db      	ldr	r3, [r3, #12]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030240 	.word	0x00030240

000d48a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <network_ready+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	691b      	ldr	r3, [r3, #16]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030240 	.word	0x00030240

000d48b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <network_on+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	695b      	ldr	r3, [r3, #20]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030240 	.word	0x00030240

000d48c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <network_off+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	699b      	ldr	r3, [r3, #24]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030240 	.word	0x00030240

000d48d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <network_listen+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	69db      	ldr	r3, [r3, #28]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030240 	.word	0x00030240

000d48e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <network_listening+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6a1b      	ldr	r3, [r3, #32]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030240 	.word	0x00030240

000d48f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <network_set_listen_timeout+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030240 	.word	0x00030240

000d4900 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <network_get_listen_timeout+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030240 	.word	0x00030240

000d4910 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030244 	.word	0x00030244

000d4920 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <malloc+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	681b      	ldr	r3, [r3, #0]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	0003021c 	.word	0x0003021c

000d4930 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <free+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	685b      	ldr	r3, [r3, #4]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	0003021c 	.word	0x0003021c

000d4940 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4940:	2200      	movs	r2, #0
   d4942:	4611      	mov	r1, r2
   d4944:	6840      	ldr	r0, [r0, #4]
   d4946:	f7ff bfcb 	b.w	d48e0 <network_listening>

000d494a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d494a:	2200      	movs	r2, #0
   d494c:	4611      	mov	r1, r2
   d494e:	6840      	ldr	r0, [r0, #4]
   d4950:	f7ff bfd6 	b.w	d4900 <network_get_listen_timeout>

000d4954 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4954:	2200      	movs	r2, #0
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	f7ff bfca 	b.w	d48f0 <network_set_listen_timeout>

000d495c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d495c:	2200      	movs	r2, #0
   d495e:	f081 0101 	eor.w	r1, r1, #1
   d4962:	6840      	ldr	r0, [r0, #4]
   d4964:	f7ff bfb4 	b.w	d48d0 <network_listen>

000d4968 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4968:	2300      	movs	r3, #0
   d496a:	461a      	mov	r2, r3
   d496c:	4619      	mov	r1, r3
   d496e:	6840      	ldr	r0, [r0, #4]
   d4970:	f7ff bfa6 	b.w	d48c0 <network_off>

000d4974 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4974:	2300      	movs	r3, #0
   d4976:	461a      	mov	r2, r3
   d4978:	4619      	mov	r1, r3
   d497a:	6840      	ldr	r0, [r0, #4]
   d497c:	f7ff bf98 	b.w	d48b0 <network_on>

000d4980 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4980:	2200      	movs	r2, #0
   d4982:	4611      	mov	r1, r2
   d4984:	6840      	ldr	r0, [r0, #4]
   d4986:	f7ff bf8b 	b.w	d48a0 <network_ready>

000d498a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d498a:	2200      	movs	r2, #0
   d498c:	4611      	mov	r1, r2
   d498e:	6840      	ldr	r0, [r0, #4]
   d4990:	f7ff bf76 	b.w	d4880 <network_connecting>

000d4994 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4994:	2200      	movs	r2, #0
   d4996:	2102      	movs	r1, #2
   d4998:	6840      	ldr	r0, [r0, #4]
   d499a:	f7ff bf79 	b.w	d4890 <network_disconnect>

000d499e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d499e:	2300      	movs	r3, #0
   d49a0:	461a      	mov	r2, r3
   d49a2:	6840      	ldr	r0, [r0, #4]
   d49a4:	f7ff bf64 	b.w	d4870 <network_connect>

000d49a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d49a8:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d49aa:	2203      	movs	r2, #3
   d49ac:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d49ae:	4a02      	ldr	r2, [pc, #8]	; (d49b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d49b0:	601a      	str	r2, [r3, #0]
   d49b2:	4770      	bx	lr
   d49b4:	2003e4b4 	.word	0x2003e4b4
   d49b8:	000d6590 	.word	0x000d6590

000d49bc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d49bc:	b510      	push	{r4, lr}
   d49be:	4604      	mov	r4, r0
{
    _spi = spi;
   d49c0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d49c2:	4608      	mov	r0, r1
   d49c4:	f7ff fe10 	bl	d45e8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d49c8:	2300      	movs	r3, #0
   d49ca:	6063      	str	r3, [r4, #4]
}
   d49cc:	4620      	mov	r0, r4
   d49ce:	bd10      	pop	{r4, pc}

000d49d0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d49d0:	7800      	ldrb	r0, [r0, #0]
   d49d2:	f7ff be11 	b.w	d45f8 <HAL_SPI_Is_Enabled>

000d49d6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d49d6:	b510      	push	{r4, lr}
   d49d8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d49da:	6800      	ldr	r0, [r0, #0]
   d49dc:	b118      	cbz	r0, d49e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d49de:	f7ff ffa7 	bl	d4930 <free>
            wakeupSource_ = nullptr;
   d49e2:	2300      	movs	r3, #0
   d49e4:	6023      	str	r3, [r4, #0]
   d49e6:	bd10      	pop	{r4, pc}

000d49e8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d49e8:	b510      	push	{r4, lr}
   d49ea:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d49ec:	f7ff fff3 	bl	d49d6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d49f0:	4620      	mov	r0, r4
   d49f2:	bd10      	pop	{r4, pc}

000d49f4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d49f4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d49f6:	4c09      	ldr	r4, [pc, #36]	; (d4a1c <_GLOBAL__sub_I_System+0x28>)
   d49f8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d49fa:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d49fe:	6020      	str	r0, [r4, #0]
   d4a00:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4a02:	71a0      	strb	r0, [r4, #6]
   d4a04:	8120      	strh	r0, [r4, #8]
   d4a06:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a08:	f7ff ff0e 	bl	d4828 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4a0c:	4620      	mov	r0, r4
   d4a0e:	4a04      	ldr	r2, [pc, #16]	; (d4a20 <_GLOBAL__sub_I_System+0x2c>)
   d4a10:	4904      	ldr	r1, [pc, #16]	; (d4a24 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4a16:	f000 be73 	b.w	d5700 <__aeabi_atexit>
   d4a1a:	bf00      	nop
   d4a1c:	2003e4bc 	.word	0x2003e4bc
   d4a20:	2003e48c 	.word	0x2003e48c
   d4a24:	000d49e9 	.word	0x000d49e9

000d4a28 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4a28:	b510      	push	{r4, lr}
   d4a2a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4a2c:	6800      	ldr	r0, [r0, #0]
   d4a2e:	b108      	cbz	r0, d4a34 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4a30:	f7ff fe1a 	bl	d4668 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4a34:	4620      	mov	r0, r4
   d4a36:	bd10      	pop	{r4, pc}

000d4a38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4a38:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a3a:	4c06      	ldr	r4, [pc, #24]	; (d4a54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4a3c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4a3e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a40:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4a42:	f7ff fe09 	bl	d4658 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4a46:	4620      	mov	r0, r4
   d4a48:	4a03      	ldr	r2, [pc, #12]	; (d4a58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4a4a:	4904      	ldr	r1, [pc, #16]	; (d4a5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4a50:	f000 be56 	b.w	d5700 <__aeabi_atexit>
   d4a54:	2003e4c8 	.word	0x2003e4c8
   d4a58:	2003e48c 	.word	0x2003e48c
   d4a5c:	000d4a29 	.word	0x000d4a29

000d4a60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a62:	4606      	mov	r6, r0
   d4a64:	460d      	mov	r5, r1
   d4a66:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4a68:	2400      	movs	r4, #0
  while (size--) {
   d4a6a:	42bd      	cmp	r5, r7
   d4a6c:	d00c      	beq.n	d4a88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a6e:	6833      	ldr	r3, [r6, #0]
   d4a70:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a74:	689b      	ldr	r3, [r3, #8]
   d4a76:	4630      	mov	r0, r6
   d4a78:	4798      	blx	r3
     if (chunk>=0)
   d4a7a:	2800      	cmp	r0, #0
   d4a7c:	db01      	blt.n	d4a82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a7e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4a80:	e7f3      	b.n	d4a6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a82:	2c00      	cmp	r4, #0
   d4a84:	bf08      	it	eq
   d4a86:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a88:	4620      	mov	r0, r4
   d4a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4a8c:	b570      	push	{r4, r5, r6, lr}
   d4a8e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4a90:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4a92:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4a94:	b149      	cbz	r1, d4aaa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4a96:	f001 fce7 	bl	d6468 <strlen>
   d4a9a:	682b      	ldr	r3, [r5, #0]
   d4a9c:	4602      	mov	r2, r0
   d4a9e:	4621      	mov	r1, r4
   d4aa0:	4628      	mov	r0, r5
   d4aa2:	68db      	ldr	r3, [r3, #12]
    }
   d4aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4aa8:	4718      	bx	r3
    }
   d4aaa:	bd70      	pop	{r4, r5, r6, pc}

000d4aac <_ZN5Print5printEPKc>:
   d4aac:	b508      	push	{r3, lr}
   d4aae:	f7ff ffed 	bl	d4a8c <_ZN5Print5writeEPKc>
   d4ab2:	bd08      	pop	{r3, pc}

000d4ab4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ab4:	6803      	ldr	r3, [r0, #0]
   d4ab6:	689b      	ldr	r3, [r3, #8]
   d4ab8:	4718      	bx	r3

000d4aba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4aba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4abc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4abe:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ac0:	f7ff fff8 	bl	d4ab4 <_ZN5Print5printEc>
  n += print('\n');
   d4ac4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4ac6:	4604      	mov	r4, r0
  n += print('\n');
   d4ac8:	4628      	mov	r0, r5
   d4aca:	f7ff fff3 	bl	d4ab4 <_ZN5Print5printEc>
  return n;
}
   d4ace:	4420      	add	r0, r4
   d4ad0:	bd38      	pop	{r3, r4, r5, pc}

000d4ad2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4ad2:	b538      	push	{r3, r4, r5, lr}
   d4ad4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ad6:	f7ff ffd9 	bl	d4a8c <_ZN5Print5writeEPKc>
   d4ada:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4adc:	4628      	mov	r0, r5
   d4ade:	f7ff ffec 	bl	d4aba <_ZN5Print7printlnEv>
  return n;
}
   d4ae2:	4420      	add	r0, r4
   d4ae4:	bd38      	pop	{r3, r4, r5, pc}

000d4ae6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ae6:	b530      	push	{r4, r5, lr}
   d4ae8:	b08b      	sub	sp, #44	; 0x2c
   d4aea:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4aec:	2100      	movs	r1, #0
   d4aee:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4af2:	2a01      	cmp	r2, #1
   d4af4:	bf98      	it	ls
   d4af6:	220a      	movls	r2, #10
   d4af8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4afc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4b00:	fb05 3312 	mls	r3, r5, r2, r3
   d4b04:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4b08:	2b09      	cmp	r3, #9
   d4b0a:	bf94      	ite	ls
   d4b0c:	3330      	addls	r3, #48	; 0x30
   d4b0e:	3337      	addhi	r3, #55	; 0x37
   d4b10:	b2db      	uxtb	r3, r3
   d4b12:	4621      	mov	r1, r4
   d4b14:	f804 3901 	strb.w	r3, [r4], #-1
   d4b18:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4b1a:	2d00      	cmp	r5, #0
   d4b1c:	d1ee      	bne.n	d4afc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4b1e:	f7ff ffb5 	bl	d4a8c <_ZN5Print5writeEPKc>
}
   d4b22:	b00b      	add	sp, #44	; 0x2c
   d4b24:	bd30      	pop	{r4, r5, pc}
	...

000d4b28 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b2c:	ec57 6b10 	vmov	r6, r7, d0
   d4b30:	4682      	mov	sl, r0
   d4b32:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4b34:	ee10 2a10 	vmov	r2, s0
   d4b38:	463b      	mov	r3, r7
   d4b3a:	ee10 0a10 	vmov	r0, s0
   d4b3e:	4639      	mov	r1, r7
   d4b40:	f001 fb9a 	bl	d6278 <__aeabi_dcmpun>
   d4b44:	b108      	cbz	r0, d4b4a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4b46:	494e      	ldr	r1, [pc, #312]	; (d4c80 <_ZN5Print10printFloatEdh+0x158>)
   d4b48:	e012      	b.n	d4b70 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4b4a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4b4e:	f04f 32ff 	mov.w	r2, #4294967295
   d4b52:	4b4c      	ldr	r3, [pc, #304]	; (d4c84 <_ZN5Print10printFloatEdh+0x15c>)
   d4b54:	4630      	mov	r0, r6
   d4b56:	4649      	mov	r1, r9
   d4b58:	f001 fb8e 	bl	d6278 <__aeabi_dcmpun>
   d4b5c:	b968      	cbnz	r0, d4b7a <_ZN5Print10printFloatEdh+0x52>
   d4b5e:	f04f 32ff 	mov.w	r2, #4294967295
   d4b62:	4b48      	ldr	r3, [pc, #288]	; (d4c84 <_ZN5Print10printFloatEdh+0x15c>)
   d4b64:	4630      	mov	r0, r6
   d4b66:	4649      	mov	r1, r9
   d4b68:	f001 fb68 	bl	d623c <__aeabi_dcmple>
   d4b6c:	b928      	cbnz	r0, d4b7a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4b6e:	4946      	ldr	r1, [pc, #280]	; (d4c88 <_ZN5Print10printFloatEdh+0x160>)
   d4b70:	4650      	mov	r0, sl
   d4b72:	f7ff ff8b 	bl	d4a8c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4b7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4b7e:	4b43      	ldr	r3, [pc, #268]	; (d4c8c <_ZN5Print10printFloatEdh+0x164>)
   d4b80:	4630      	mov	r0, r6
   d4b82:	4639      	mov	r1, r7
   d4b84:	f001 fb6e 	bl	d6264 <__aeabi_dcmpgt>
   d4b88:	b108      	cbz	r0, d4b8e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4b8a:	4941      	ldr	r1, [pc, #260]	; (d4c90 <_ZN5Print10printFloatEdh+0x168>)
   d4b8c:	e7f0      	b.n	d4b70 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4b8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4b92:	4b40      	ldr	r3, [pc, #256]	; (d4c94 <_ZN5Print10printFloatEdh+0x16c>)
   d4b94:	4630      	mov	r0, r6
   d4b96:	4639      	mov	r1, r7
   d4b98:	f001 fb46 	bl	d6228 <__aeabi_dcmplt>
   d4b9c:	2800      	cmp	r0, #0
   d4b9e:	d1f4      	bne.n	d4b8a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4ba0:	2200      	movs	r2, #0
   d4ba2:	2300      	movs	r3, #0
   d4ba4:	4630      	mov	r0, r6
   d4ba6:	4639      	mov	r1, r7
   d4ba8:	f001 fb3e 	bl	d6228 <__aeabi_dcmplt>
   d4bac:	b140      	cbz	r0, d4bc0 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4bae:	212d      	movs	r1, #45	; 0x2d
   d4bb0:	4650      	mov	r0, sl
   d4bb2:	f7ff ff7f 	bl	d4ab4 <_ZN5Print5printEc>
     number = -number;
   d4bb6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4bba:	4604      	mov	r4, r0
     number = -number;
   d4bbc:	461f      	mov	r7, r3
   d4bbe:	e000      	b.n	d4bc2 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4bc0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4bc2:	4935      	ldr	r1, [pc, #212]	; (d4c98 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4bc4:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4bc8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4bca:	fa5f f388 	uxtb.w	r3, r8
   d4bce:	429d      	cmp	r5, r3
   d4bd0:	d906      	bls.n	d4be0 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4bd2:	2200      	movs	r2, #0
   d4bd4:	4b31      	ldr	r3, [pc, #196]	; (d4c9c <_ZN5Print10printFloatEdh+0x174>)
   d4bd6:	f001 f9df 	bl	d5f98 <__aeabi_ddiv>
   d4bda:	f108 0801 	add.w	r8, r8, #1
   d4bde:	e7f4      	b.n	d4bca <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4be0:	4632      	mov	r2, r6
   d4be2:	463b      	mov	r3, r7
   d4be4:	f000 fefc 	bl	d59e0 <__adddf3>
   d4be8:	460f      	mov	r7, r1
   d4bea:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4bec:	f001 fb82 	bl	d62f4 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4bf0:	220a      	movs	r2, #10
   d4bf2:	4601      	mov	r1, r0
   d4bf4:	4680      	mov	r8, r0
   d4bf6:	4650      	mov	r0, sl
   d4bf8:	f7ff ff75 	bl	d4ae6 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4bfc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4bfe:	b3e5      	cbz	r5, d4c7a <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4c00:	4640      	mov	r0, r8
   d4c02:	f001 f829 	bl	d5c58 <__aeabi_ui2d>
   d4c06:	4602      	mov	r2, r0
   d4c08:	460b      	mov	r3, r1
   d4c0a:	4630      	mov	r0, r6
   d4c0c:	4639      	mov	r1, r7
   d4c0e:	f000 fee5 	bl	d59dc <__aeabi_dsub>
   d4c12:	4606      	mov	r6, r0
   d4c14:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c16:	4650      	mov	r0, sl
   d4c18:	4921      	ldr	r1, [pc, #132]	; (d4ca0 <_ZN5Print10printFloatEdh+0x178>)
   d4c1a:	f7ff ff37 	bl	d4a8c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4c1e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4c20:	2200      	movs	r2, #0
   d4c22:	4b1e      	ldr	r3, [pc, #120]	; (d4c9c <_ZN5Print10printFloatEdh+0x174>)
   d4c24:	4630      	mov	r0, r6
   d4c26:	4639      	mov	r1, r7
   d4c28:	f001 f88c 	bl	d5d44 <__aeabi_dmul>
   d4c2c:	4606      	mov	r6, r0
   d4c2e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4c30:	f001 fb38 	bl	d62a4 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4c34:	f1b0 0900 	subs.w	r9, r0, #0
   d4c38:	da07      	bge.n	d4c4a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4c3a:	212d      	movs	r1, #45	; 0x2d
   d4c3c:	4650      	mov	r0, sl
   d4c3e:	f7ff ff39 	bl	d4ab4 <_ZN5Print5printEc>
            val = -n;
   d4c42:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4c46:	4680      	mov	r8, r0
   d4c48:	e002      	b.n	d4c50 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4c4a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4c4c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c50:	220a      	movs	r2, #10
   d4c52:	4650      	mov	r0, sl
   d4c54:	f7ff ff47 	bl	d4ae6 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4c58:	4440      	add	r0, r8
   d4c5a:	4404      	add	r4, r0
    remainder -= toPrint;
   d4c5c:	4648      	mov	r0, r9
   d4c5e:	f001 f80b 	bl	d5c78 <__aeabi_i2d>
   d4c62:	4602      	mov	r2, r0
   d4c64:	460b      	mov	r3, r1
   d4c66:	4630      	mov	r0, r6
   d4c68:	4639      	mov	r1, r7
   d4c6a:	f000 feb7 	bl	d59dc <__aeabi_dsub>
   d4c6e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4c70:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4c74:	4606      	mov	r6, r0
   d4c76:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4c78:	d1d2      	bne.n	d4c20 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4c80:	000d65bc 	.word	0x000d65bc
   d4c84:	7fefffff 	.word	0x7fefffff
   d4c88:	000d65c4 	.word	0x000d65c4
   d4c8c:	41efffff 	.word	0x41efffff
   d4c90:	000d65c0 	.word	0x000d65c0
   d4c94:	c1efffff 	.word	0xc1efffff
   d4c98:	3fe00000 	.word	0x3fe00000
   d4c9c:	40240000 	.word	0x40240000
   d4ca0:	000d64d6 	.word	0x000d64d6

000d4ca4 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d4ca4:	b538      	push	{r3, r4, r5, lr}
   d4ca6:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d4ca8:	ee10 0a10 	vmov	r0, s0
   d4cac:	b2cd      	uxtb	r5, r1
   d4cae:	f000 fff5 	bl	d5c9c <__aeabi_f2d>
   d4cb2:	ec41 0b10 	vmov	d0, r0, r1
   d4cb6:	4629      	mov	r1, r5
   d4cb8:	4620      	mov	r0, r4
}
   d4cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d4cbe:	f7ff bf33 	b.w	d4b28 <_ZN5Print10printFloatEdh>
	...

000d4cc4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4cc4:	4b01      	ldr	r3, [pc, #4]	; (d4ccc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4cc6:	4a02      	ldr	r2, [pc, #8]	; (d4cd0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4cc8:	601a      	str	r2, [r3, #0]
   d4cca:	4770      	bx	lr
   d4ccc:	2003e4cc 	.word	0x2003e4cc
   d4cd0:	000d663b 	.word	0x000d663b

000d4cd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4cd4:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4cd6:	681a      	ldr	r2, [r3, #0]
   d4cd8:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4cda:	601a      	str	r2, [r3, #0]
   d4cdc:	4770      	bx	lr
   d4cde:	bf00      	nop
   d4ce0:	2003e424 	.word	0x2003e424
   d4ce4:	2003e4d0 	.word	0x2003e4d0

000d4ce8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ce8:	2100      	movs	r1, #0
   d4cea:	f7ff bda5 	b.w	d4838 <system_delay_ms>

000d4cee <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4cee:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4cf0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4cf2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4cf4:	b113      	cbz	r3, d4cfc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cf6:	2203      	movs	r2, #3
   d4cf8:	4601      	mov	r1, r0
   d4cfa:	4798      	blx	r3
    }
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	bd10      	pop	{r4, pc}

000d4d00 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d00:	b510      	push	{r4, lr}
   d4d02:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d04:	f7ff fff3 	bl	d4cee <_ZNSt14_Function_baseD1Ev>
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bd10      	pop	{r4, pc}

000d4d0c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d0c:	4803      	ldr	r0, [pc, #12]	; (d4d1c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d0e:	4a04      	ldr	r2, [pc, #16]	; (d4d20 <_GLOBAL__sub_I_RGB+0x14>)
   d4d10:	4904      	ldr	r1, [pc, #16]	; (d4d24 <_GLOBAL__sub_I_RGB+0x18>)
   d4d12:	2300      	movs	r3, #0
   d4d14:	6083      	str	r3, [r0, #8]
   d4d16:	f000 bcf3 	b.w	d5700 <__aeabi_atexit>
   d4d1a:	bf00      	nop
   d4d1c:	2003e4d4 	.word	0x2003e4d4
   d4d20:	2003e48c 	.word	0x2003e48c
   d4d24:	000d4d01 	.word	0x000d4d01

000d4d28 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4d28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d2a:	4b0c      	ldr	r3, [pc, #48]	; (d4d5c <serialEventRun+0x34>)
   d4d2c:	b133      	cbz	r3, d4d3c <serialEventRun+0x14>
   d4d2e:	f000 f957 	bl	d4fe0 <_Z16_fetch_usbserialv>
   d4d32:	6803      	ldr	r3, [r0, #0]
   d4d34:	691b      	ldr	r3, [r3, #16]
   d4d36:	4798      	blx	r3
   d4d38:	2800      	cmp	r0, #0
   d4d3a:	dc09      	bgt.n	d4d50 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4d3c:	4b08      	ldr	r3, [pc, #32]	; (d4d60 <serialEventRun+0x38>)
   d4d3e:	b163      	cbz	r3, d4d5a <serialEventRun+0x32>
   d4d40:	f000 fa1c 	bl	d517c <_Z22__fetch_global_Serial1v>
   d4d44:	6803      	ldr	r3, [r0, #0]
   d4d46:	691b      	ldr	r3, [r3, #16]
   d4d48:	4798      	blx	r3
   d4d4a:	2800      	cmp	r0, #0
   d4d4c:	dc03      	bgt.n	d4d56 <serialEventRun+0x2e>
   d4d4e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4d50:	f3af 8000 	nop.w
   d4d54:	e7f2      	b.n	d4d3c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4d56:	f3af 8000 	nop.w
   d4d5a:	bd08      	pop	{r3, pc}
	...

000d4d64 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4d64:	b508      	push	{r3, lr}
	serialEventRun();
   d4d66:	f7ff ffdf 	bl	d4d28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4d6a:	f7ff fc55 	bl	d4618 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4d6e:	4b01      	ldr	r3, [pc, #4]	; (d4d74 <_post_loop+0x10>)
   d4d70:	6018      	str	r0, [r3, #0]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	2003e730 	.word	0x2003e730

000d4d78 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4d78:	4802      	ldr	r0, [pc, #8]	; (d4d84 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4d7a:	4a03      	ldr	r2, [pc, #12]	; (d4d88 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4d7c:	4903      	ldr	r1, [pc, #12]	; (d4d8c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4d7e:	1a12      	subs	r2, r2, r0
   d4d80:	f001 bb36 	b.w	d63f0 <memcpy>
   d4d84:	2003f400 	.word	0x2003f400
   d4d88:	2003f404 	.word	0x2003f404
   d4d8c:	000d68c0 	.word	0x000d68c0

000d4d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4d90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d92:	2300      	movs	r3, #0
   d4d94:	9300      	str	r3, [sp, #0]
   d4d96:	461a      	mov	r2, r3
   d4d98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d9c:	f7ff fd5e 	bl	d485c <system_ctrl_set_result>
}
   d4da0:	b003      	add	sp, #12
   d4da2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4da8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4da8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4daa:	8843      	ldrh	r3, [r0, #2]
   d4dac:	2b0a      	cmp	r3, #10
   d4dae:	d008      	beq.n	d4dc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4db0:	2b50      	cmp	r3, #80	; 0x50
   d4db2:	d109      	bne.n	d4dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4db4:	4b09      	ldr	r3, [pc, #36]	; (d4ddc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4db6:	681b      	ldr	r3, [r3, #0]
   d4db8:	b13b      	cbz	r3, d4dca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4dba:	b003      	add	sp, #12
   d4dbc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4dc0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4dc2:	f7ff ffe5 	bl	d4d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4dc6:	e006      	b.n	d4dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4dc8:	2300      	movs	r3, #0
   d4dca:	9300      	str	r3, [sp, #0]
   d4dcc:	461a      	mov	r2, r3
   d4dce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4dd2:	f7ff fd43 	bl	d485c <system_ctrl_set_result>
        break;
    }
}
   d4dd6:	b003      	add	sp, #12
   d4dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ddc:	2003e4e4 	.word	0x2003e4e4

000d4de0 <module_user_init_hook>:

void module_user_init_hook()
{
   d4de0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4de2:	4c10      	ldr	r4, [pc, #64]	; (d4e24 <module_user_init_hook+0x44>)
   d4de4:	4d10      	ldr	r5, [pc, #64]	; (d4e28 <module_user_init_hook+0x48>)
   d4de6:	6823      	ldr	r3, [r4, #0]
   d4de8:	42ab      	cmp	r3, r5
   d4dea:	4b10      	ldr	r3, [pc, #64]	; (d4e2c <module_user_init_hook+0x4c>)
   d4dec:	bf0c      	ite	eq
   d4dee:	2201      	moveq	r2, #1
   d4df0:	2200      	movne	r2, #0
   d4df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4df4:	d002      	beq.n	d4dfc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4df6:	f7ff ffbf 	bl	d4d78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4dfa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4dfc:	f7ff fc04 	bl	d4608 <HAL_RNG_GetRandomNumber>
   d4e00:	4604      	mov	r4, r0
    srand(seed);
   d4e02:	f001 fb09 	bl	d6418 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e06:	4b0a      	ldr	r3, [pc, #40]	; (d4e30 <module_user_init_hook+0x50>)
   d4e08:	b113      	cbz	r3, d4e10 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4e10:	2100      	movs	r1, #0
   d4e12:	4807      	ldr	r0, [pc, #28]	; (d4e30 <module_user_init_hook+0x50>)
   d4e14:	f7ff fd7c 	bl	d4910 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e18:	2100      	movs	r1, #0
   d4e1a:	4806      	ldr	r0, [pc, #24]	; (d4e34 <module_user_init_hook+0x54>)
}
   d4e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e20:	f7ff bd12 	b.w	d4848 <system_ctrl_set_app_request_handler>
   d4e24:	2003f400 	.word	0x2003f400
   d4e28:	9a271c1e 	.word	0x9a271c1e
   d4e2c:	2003e4e8 	.word	0x2003e4e8
   d4e30:	00000000 	.word	0x00000000
   d4e34:	000d4da9 	.word	0x000d4da9

000d4e38 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e38:	4770      	bx	lr

000d4e3a <_ZN9IPAddressD0Ev>:
   d4e3a:	b510      	push	{r4, lr}
   d4e3c:	2118      	movs	r1, #24
   d4e3e:	4604      	mov	r4, r0
   d4e40:	f000 fc6c 	bl	d571c <_ZdlPvj>
   d4e44:	4620      	mov	r0, r4
   d4e46:	bd10      	pop	{r4, pc}

000d4e48 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e48:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e4a:	7d03      	ldrb	r3, [r0, #20]
   d4e4c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e4e:	b08d      	sub	sp, #52	; 0x34
   d4e50:	460e      	mov	r6, r1
   d4e52:	f100 0704 	add.w	r7, r0, #4
   d4e56:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e5a:	d002      	beq.n	d4e62 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4e5c:	f100 0508 	add.w	r5, r0, #8
   d4e60:	e018      	b.n	d4e94 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e62:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e64:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e66:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e6a:	232f      	movs	r3, #47	; 0x2f
   d4e6c:	462a      	mov	r2, r5
   d4e6e:	200a      	movs	r0, #10
   d4e70:	f7ff fc02 	bl	d4678 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e74:	4628      	mov	r0, r5
   d4e76:	f001 faf7 	bl	d6468 <strlen>
   d4e7a:	6833      	ldr	r3, [r6, #0]
   d4e7c:	4602      	mov	r2, r0
   d4e7e:	68db      	ldr	r3, [r3, #12]
   d4e80:	4629      	mov	r1, r5
   d4e82:	4630      	mov	r0, r6
   d4e84:	4798      	blx	r3
   d4e86:	e00f      	b.n	d4ea8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4e88:	b124      	cbz	r4, d4e94 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4e8a:	212e      	movs	r1, #46	; 0x2e
   d4e8c:	4630      	mov	r0, r6
   d4e8e:	f7ff fe11 	bl	d4ab4 <_ZN5Print5printEc>
   d4e92:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e98:	220a      	movs	r2, #10
   d4e9a:	4630      	mov	r0, r6
   d4e9c:	f7ff fe23 	bl	d4ae6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ea0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ea2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ea4:	d1f0      	bne.n	d4e88 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ea6:	4620      	mov	r0, r4
    }
    return n;
}
   d4ea8:	b00d      	add	sp, #52	; 0x34
   d4eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4eac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4eac:	b510      	push	{r4, lr}
   d4eae:	4b05      	ldr	r3, [pc, #20]	; (d4ec4 <_ZN9IPAddressC1Ev+0x18>)
   d4eb0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4eb2:	2211      	movs	r2, #17
   d4eb4:	f840 3b04 	str.w	r3, [r0], #4
   d4eb8:	2100      	movs	r1, #0
   d4eba:	f001 faa4 	bl	d6406 <memset>
{
    clear();
}
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	bd10      	pop	{r4, pc}
   d4ec2:	bf00      	nop
   d4ec4:	000d66d8 	.word	0x000d66d8

000d4ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ec8:	4603      	mov	r3, r0
   d4eca:	4a07      	ldr	r2, [pc, #28]	; (d4ee8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ecc:	b510      	push	{r4, lr}
   d4ece:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4ed2:	f101 0210 	add.w	r2, r1, #16
   d4ed6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4eda:	f843 4b04 	str.w	r4, [r3], #4
   d4ede:	4291      	cmp	r1, r2
   d4ee0:	d1f9      	bne.n	d4ed6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ee2:	780a      	ldrb	r2, [r1, #0]
   d4ee4:	701a      	strb	r2, [r3, #0]
}
   d4ee6:	bd10      	pop	{r4, pc}
   d4ee8:	000d66d8 	.word	0x000d66d8

000d4eec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4eec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4eee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ef2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ef6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4efa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4efe:	2304      	movs	r3, #4
   d4f00:	6041      	str	r1, [r0, #4]
   d4f02:	7503      	strb	r3, [r0, #20]
   d4f04:	bd10      	pop	{r4, pc}

000d4f06 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4f06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f08:	780d      	ldrb	r5, [r1, #0]
   d4f0a:	788b      	ldrb	r3, [r1, #2]
   d4f0c:	784a      	ldrb	r2, [r1, #1]
   d4f0e:	78c9      	ldrb	r1, [r1, #3]
   d4f10:	9100      	str	r1, [sp, #0]
   d4f12:	4629      	mov	r1, r5
   d4f14:	f7ff ffea 	bl	d4eec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4f18:	b003      	add	sp, #12
   d4f1a:	bd30      	pop	{r4, r5, pc}

000d4f1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f1c:	7441      	strb	r1, [r0, #17]
   d4f1e:	4770      	bx	lr

000d4f20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4f20:	4770      	bx	lr

000d4f22 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4f22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4f24:	2100      	movs	r1, #0
   d4f26:	7c00      	ldrb	r0, [r0, #16]
   d4f28:	f7ff fc66 	bl	d47f8 <HAL_USB_USART_Receive_Data>
}
   d4f2c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f30:	bf28      	it	cs
   d4f32:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f36:	bd08      	pop	{r3, pc}

000d4f38 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4f38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4f3a:	2101      	movs	r1, #1
   d4f3c:	7c00      	ldrb	r0, [r0, #16]
   d4f3e:	f7ff fc5b 	bl	d47f8 <HAL_USB_USART_Receive_Data>
}
   d4f42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f46:	bf28      	it	cs
   d4f48:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f4c:	bd08      	pop	{r3, pc}

000d4f4e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4f4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4f50:	7c00      	ldrb	r0, [r0, #16]
   d4f52:	f7ff fc49 	bl	d47e8 <HAL_USB_USART_Available_Data_For_Write>
}
   d4f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f5a:	bd08      	pop	{r3, pc}

000d4f5c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4f5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4f5e:	7c00      	ldrb	r0, [r0, #16]
   d4f60:	f7ff fc3a 	bl	d47d8 <HAL_USB_USART_Available_Data>
}
   d4f64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f68:	bd08      	pop	{r3, pc}

000d4f6a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4f6a:	7c00      	ldrb	r0, [r0, #16]
   d4f6c:	f7ff bc54 	b.w	d4818 <HAL_USB_USART_Flush_Data>

000d4f70 <_ZN9USBSerialD0Ev>:
   d4f70:	b510      	push	{r4, lr}
   d4f72:	2114      	movs	r1, #20
   d4f74:	4604      	mov	r4, r0
   d4f76:	f000 fbd1 	bl	d571c <_ZdlPvj>
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	bd10      	pop	{r4, pc}

000d4f7e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f7e:	b538      	push	{r3, r4, r5, lr}
   d4f80:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f82:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f84:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f86:	f7ff fc2f 	bl	d47e8 <HAL_USB_USART_Available_Data_For_Write>
   d4f8a:	2800      	cmp	r0, #0
   d4f8c:	dc01      	bgt.n	d4f92 <_ZN9USBSerial5writeEh+0x14>
   d4f8e:	7c60      	ldrb	r0, [r4, #17]
   d4f90:	b128      	cbz	r0, d4f9e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f92:	4629      	mov	r1, r5
   d4f94:	7c20      	ldrb	r0, [r4, #16]
   d4f96:	f7ff fc37 	bl	d4808 <HAL_USB_USART_Send_Data>
   d4f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4f9e:	bd38      	pop	{r3, r4, r5, pc}

000d4fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4fa0:	b510      	push	{r4, lr}
   d4fa2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4fa4:	2300      	movs	r3, #0
   d4fa6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fac:	60a3      	str	r3, [r4, #8]
   d4fae:	4b05      	ldr	r3, [pc, #20]	; (d4fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4fb0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4fb2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4fb4:	4608      	mov	r0, r1
{
  _serial = serial;
   d4fb6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4fb8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4fba:	4611      	mov	r1, r2
   d4fbc:	f7ff fbfc 	bl	d47b8 <HAL_USB_USART_Init>
}
   d4fc0:	4620      	mov	r0, r4
   d4fc2:	bd10      	pop	{r4, pc}
   d4fc4:	000d66ec 	.word	0x000d66ec

000d4fc8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4fc8:	2200      	movs	r2, #0
   d4fca:	7c00      	ldrb	r0, [r0, #16]
   d4fcc:	f7ff bbfc 	b.w	d47c8 <HAL_USB_USART_Begin>

000d4fd0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4fd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4fd2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4fd4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4fd6:	2100      	movs	r1, #0
   d4fd8:	f001 fa15 	bl	d6406 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4fdc:	4620      	mov	r0, r4
   d4fde:	bd10      	pop	{r4, pc}

000d4fe0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4fe0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4fe2:	4d0e      	ldr	r5, [pc, #56]	; (d501c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4fe4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4fe6:	a801      	add	r0, sp, #4
   d4fe8:	f7ff fff2 	bl	d4fd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4fec:	6829      	ldr	r1, [r5, #0]
   d4fee:	f011 0401 	ands.w	r4, r1, #1
   d4ff2:	d110      	bne.n	d5016 <_Z16_fetch_usbserialv+0x36>
   d4ff4:	4628      	mov	r0, r5
   d4ff6:	f7ff f856 	bl	d40a6 <__cxa_guard_acquire>
   d4ffa:	b160      	cbz	r0, d5016 <_Z16_fetch_usbserialv+0x36>
   d4ffc:	aa01      	add	r2, sp, #4
   d4ffe:	4621      	mov	r1, r4
   d5000:	4807      	ldr	r0, [pc, #28]	; (d5020 <_Z16_fetch_usbserialv+0x40>)
   d5002:	f7ff ffcd 	bl	d4fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5006:	4628      	mov	r0, r5
   d5008:	f7ff f852 	bl	d40b0 <__cxa_guard_release>
   d500c:	4a05      	ldr	r2, [pc, #20]	; (d5024 <_Z16_fetch_usbserialv+0x44>)
   d500e:	4906      	ldr	r1, [pc, #24]	; (d5028 <_Z16_fetch_usbserialv+0x48>)
   d5010:	4803      	ldr	r0, [pc, #12]	; (d5020 <_Z16_fetch_usbserialv+0x40>)
   d5012:	f000 fb75 	bl	d5700 <__aeabi_atexit>
	return _usbserial;
}
   d5016:	4802      	ldr	r0, [pc, #8]	; (d5020 <_Z16_fetch_usbserialv+0x40>)
   d5018:	b007      	add	sp, #28
   d501a:	bd30      	pop	{r4, r5, pc}
   d501c:	2003e4ec 	.word	0x2003e4ec
   d5020:	2003e4f0 	.word	0x2003e4f0
   d5024:	2003e48c 	.word	0x2003e48c
   d5028:	000d4f21 	.word	0x000d4f21

000d502c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d502c:	2200      	movs	r2, #0
   d502e:	4611      	mov	r1, r2
   d5030:	6840      	ldr	r0, [r0, #4]
   d5032:	f7ff bc35 	b.w	d48a0 <network_ready>

000d5036 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5036:	2200      	movs	r2, #0
   d5038:	4611      	mov	r1, r2
   d503a:	6840      	ldr	r0, [r0, #4]
   d503c:	f7ff bc50 	b.w	d48e0 <network_listening>

000d5040 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5040:	2200      	movs	r2, #0
   d5042:	4611      	mov	r1, r2
   d5044:	6840      	ldr	r0, [r0, #4]
   d5046:	f7ff bc5b 	b.w	d4900 <network_get_listen_timeout>

000d504a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d504a:	2200      	movs	r2, #0
   d504c:	6840      	ldr	r0, [r0, #4]
   d504e:	f7ff bc4f 	b.w	d48f0 <network_set_listen_timeout>

000d5052 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5052:	2200      	movs	r2, #0
   d5054:	f081 0101 	eor.w	r1, r1, #1
   d5058:	6840      	ldr	r0, [r0, #4]
   d505a:	f7ff bc39 	b.w	d48d0 <network_listen>

000d505e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d505e:	2300      	movs	r3, #0
   d5060:	461a      	mov	r2, r3
   d5062:	4619      	mov	r1, r3
   d5064:	6840      	ldr	r0, [r0, #4]
   d5066:	f7ff bc2b 	b.w	d48c0 <network_off>

000d506a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d506a:	2300      	movs	r3, #0
   d506c:	461a      	mov	r2, r3
   d506e:	4619      	mov	r1, r3
   d5070:	6840      	ldr	r0, [r0, #4]
   d5072:	f7ff bc1d 	b.w	d48b0 <network_on>

000d5076 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5076:	2200      	movs	r2, #0
   d5078:	4611      	mov	r1, r2
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	f7ff bc00 	b.w	d4880 <network_connecting>

000d5080 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5080:	2200      	movs	r2, #0
   d5082:	2102      	movs	r1, #2
   d5084:	6840      	ldr	r0, [r0, #4]
   d5086:	f7ff bc03 	b.w	d4890 <network_disconnect>

000d508a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d508a:	2300      	movs	r3, #0
   d508c:	461a      	mov	r2, r3
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	f7ff bbee 	b.w	d4870 <network_connect>

000d5094 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5094:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5096:	4c08      	ldr	r4, [pc, #32]	; (d50b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5098:	2528      	movs	r5, #40	; 0x28
   d509a:	462a      	mov	r2, r5
   d509c:	2100      	movs	r1, #0
   d509e:	4620      	mov	r0, r4
   d50a0:	f001 f9b1 	bl	d6406 <memset>
        cid = -1;
   d50a4:	f04f 33ff 	mov.w	r3, #4294967295
   d50a8:	6063      	str	r3, [r4, #4]
   d50aa:	4b04      	ldr	r3, [pc, #16]	; (d50bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d50ac:	8025      	strh	r5, [r4, #0]
   d50ae:	2204      	movs	r2, #4
   d50b0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d50b2:	4a03      	ldr	r2, [pc, #12]	; (d50c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d50b4:	601a      	str	r2, [r3, #0]
   d50b6:	bd38      	pop	{r3, r4, r5, pc}
   d50b8:	2003e50c 	.word	0x2003e50c
   d50bc:	2003e504 	.word	0x2003e504
   d50c0:	000d671c 	.word	0x000d671c

000d50c4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d50c4:	4770      	bx	lr

000d50c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d50c6:	7441      	strb	r1, [r0, #17]
   d50c8:	4770      	bx	lr

000d50ca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d50ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d50cc:	7c00      	ldrb	r0, [r0, #16]
   d50ce:	f7ff fb13 	bl	d46f8 <HAL_USART_Available_Data_For_Write>
}
   d50d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50d6:	bd08      	pop	{r3, pc}

000d50d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d50d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d50da:	7c00      	ldrb	r0, [r0, #16]
   d50dc:	f7ff fae4 	bl	d46a8 <HAL_USART_Available_Data>
}
   d50e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50e4:	bd08      	pop	{r3, pc}

000d50e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d50e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d50e8:	7c00      	ldrb	r0, [r0, #16]
   d50ea:	f7ff faed 	bl	d46c8 <HAL_USART_Peek_Data>
}
   d50ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d50f2:	bf28      	it	cs
   d50f4:	f04f 30ff 	movcs.w	r0, #4294967295
   d50f8:	bd08      	pop	{r3, pc}

000d50fa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d50fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d50fc:	7c00      	ldrb	r0, [r0, #16]
   d50fe:	f7ff fadb 	bl	d46b8 <HAL_USART_Read_Data>
}
   d5102:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5106:	bf28      	it	cs
   d5108:	f04f 30ff 	movcs.w	r0, #4294967295
   d510c:	bd08      	pop	{r3, pc}

000d510e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d510e:	7c00      	ldrb	r0, [r0, #16]
   d5110:	f7ff bae2 	b.w	d46d8 <HAL_USART_Flush_Data>

000d5114 <_ZN11USARTSerialD0Ev>:
   d5114:	b510      	push	{r4, lr}
   d5116:	2114      	movs	r1, #20
   d5118:	4604      	mov	r4, r0
   d511a:	f000 faff 	bl	d571c <_ZdlPvj>
   d511e:	4620      	mov	r0, r4
   d5120:	bd10      	pop	{r4, pc}

000d5122 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5122:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5124:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5126:	4604      	mov	r4, r0
   d5128:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d512a:	b925      	cbnz	r5, d5136 <_ZN11USARTSerial5writeEh+0x14>
   d512c:	7c00      	ldrb	r0, [r0, #16]
   d512e:	f7ff fae3 	bl	d46f8 <HAL_USART_Available_Data_For_Write>
   d5132:	2800      	cmp	r0, #0
   d5134:	dd05      	ble.n	d5142 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5136:	4631      	mov	r1, r6
   d5138:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d513a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d513e:	f7ff baab 	b.w	d4698 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5142:	4628      	mov	r0, r5
   d5144:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5148 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5148:	b510      	push	{r4, lr}
   d514a:	4604      	mov	r4, r0
   d514c:	4608      	mov	r0, r1
   d514e:	4611      	mov	r1, r2
   d5150:	2200      	movs	r2, #0
   d5152:	6062      	str	r2, [r4, #4]
   d5154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5158:	60a2      	str	r2, [r4, #8]
   d515a:	4a05      	ldr	r2, [pc, #20]	; (d5170 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d515c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d515e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5160:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5162:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5164:	461a      	mov	r2, r3
   d5166:	f7ff fa8f 	bl	d4688 <HAL_USART_Init>
}
   d516a:	4620      	mov	r0, r4
   d516c:	bd10      	pop	{r4, pc}
   d516e:	bf00      	nop
   d5170:	000d6750 	.word	0x000d6750

000d5174 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5174:	7c00      	ldrb	r0, [r0, #16]
   d5176:	f7ff bab7 	b.w	d46e8 <HAL_USART_Is_Enabled>
	...

000d517c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d517e:	4c19      	ldr	r4, [pc, #100]	; (d51e4 <_Z22__fetch_global_Serial1v+0x68>)
   d5180:	6825      	ldr	r5, [r4, #0]
   d5182:	b94d      	cbnz	r5, d5198 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5184:	2084      	movs	r0, #132	; 0x84
   d5186:	f7fe ff88 	bl	d409a <_Znwj>
   d518a:	4606      	mov	r6, r0
   d518c:	b118      	cbz	r0, d5196 <_Z22__fetch_global_Serial1v+0x1a>
   d518e:	2284      	movs	r2, #132	; 0x84
   d5190:	4629      	mov	r1, r5
   d5192:	f001 f938 	bl	d6406 <memset>
   d5196:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5198:	4d13      	ldr	r5, [pc, #76]	; (d51e8 <_Z22__fetch_global_Serial1v+0x6c>)
   d519a:	682e      	ldr	r6, [r5, #0]
   d519c:	b94e      	cbnz	r6, d51b2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d519e:	2084      	movs	r0, #132	; 0x84
   d51a0:	f7fe ff7b 	bl	d409a <_Znwj>
   d51a4:	4607      	mov	r7, r0
   d51a6:	b118      	cbz	r0, d51b0 <_Z22__fetch_global_Serial1v+0x34>
   d51a8:	2284      	movs	r2, #132	; 0x84
   d51aa:	4631      	mov	r1, r6
   d51ac:	f001 f92b 	bl	d6406 <memset>
   d51b0:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d51b2:	4f0e      	ldr	r7, [pc, #56]	; (d51ec <_Z22__fetch_global_Serial1v+0x70>)
   d51b4:	6839      	ldr	r1, [r7, #0]
   d51b6:	f011 0601 	ands.w	r6, r1, #1
   d51ba:	d111      	bne.n	d51e0 <_Z22__fetch_global_Serial1v+0x64>
   d51bc:	4638      	mov	r0, r7
   d51be:	f7fe ff72 	bl	d40a6 <__cxa_guard_acquire>
   d51c2:	b168      	cbz	r0, d51e0 <_Z22__fetch_global_Serial1v+0x64>
   d51c4:	6822      	ldr	r2, [r4, #0]
   d51c6:	682b      	ldr	r3, [r5, #0]
   d51c8:	4809      	ldr	r0, [pc, #36]	; (d51f0 <_Z22__fetch_global_Serial1v+0x74>)
   d51ca:	4631      	mov	r1, r6
   d51cc:	f7ff ffbc 	bl	d5148 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d51d0:	4638      	mov	r0, r7
   d51d2:	f7fe ff6d 	bl	d40b0 <__cxa_guard_release>
   d51d6:	4a07      	ldr	r2, [pc, #28]	; (d51f4 <_Z22__fetch_global_Serial1v+0x78>)
   d51d8:	4907      	ldr	r1, [pc, #28]	; (d51f8 <_Z22__fetch_global_Serial1v+0x7c>)
   d51da:	4805      	ldr	r0, [pc, #20]	; (d51f0 <_Z22__fetch_global_Serial1v+0x74>)
   d51dc:	f000 fa90 	bl	d5700 <__aeabi_atexit>
#endif
	return serial1;
}
   d51e0:	4803      	ldr	r0, [pc, #12]	; (d51f0 <_Z22__fetch_global_Serial1v+0x74>)
   d51e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d51e4:	2003e550 	.word	0x2003e550
   d51e8:	2003e548 	.word	0x2003e548
   d51ec:	2003e54c 	.word	0x2003e54c
   d51f0:	2003e534 	.word	0x2003e534
   d51f4:	2003e48c 	.word	0x2003e48c
   d51f8:	000d50c5 	.word	0x000d50c5

000d51fc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d51fc:	4770      	bx	lr

000d51fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d51fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5200:	4606      	mov	r6, r0
   d5202:	4615      	mov	r5, r2
   d5204:	460c      	mov	r4, r1
   d5206:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5208:	42bc      	cmp	r4, r7
   d520a:	d006      	beq.n	d521a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d520c:	6833      	ldr	r3, [r6, #0]
   d520e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5212:	689b      	ldr	r3, [r3, #8]
   d5214:	4630      	mov	r0, r6
   d5216:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5218:	e7f6      	b.n	d5208 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d521a:	4628      	mov	r0, r5
   d521c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d521e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d521e:	2200      	movs	r2, #0
   d5220:	7c00      	ldrb	r0, [r0, #16]
   d5222:	f7ff ba89 	b.w	d4738 <HAL_I2C_Write_Data>

000d5226 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5226:	2100      	movs	r1, #0
   d5228:	7c00      	ldrb	r0, [r0, #16]
   d522a:	f7ff ba8d 	b.w	d4748 <HAL_I2C_Available_Data>

000d522e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d522e:	2100      	movs	r1, #0
   d5230:	7c00      	ldrb	r0, [r0, #16]
   d5232:	f7ff ba91 	b.w	d4758 <HAL_I2C_Read_Data>

000d5236 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5236:	2100      	movs	r1, #0
   d5238:	7c00      	ldrb	r0, [r0, #16]
   d523a:	f7ff ba95 	b.w	d4768 <HAL_I2C_Peek_Data>

000d523e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d523e:	2100      	movs	r1, #0
   d5240:	7c00      	ldrb	r0, [r0, #16]
   d5242:	f7ff ba99 	b.w	d4778 <HAL_I2C_Flush_Data>

000d5246 <_ZN7TwoWireD0Ev>:
   d5246:	b510      	push	{r4, lr}
   d5248:	2114      	movs	r1, #20
   d524a:	4604      	mov	r4, r0
   d524c:	f000 fa66 	bl	d571c <_ZdlPvj>
   d5250:	4620      	mov	r0, r4
   d5252:	bd10      	pop	{r4, pc}

000d5254 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5254:	b510      	push	{r4, lr}
   d5256:	4604      	mov	r4, r0
   d5258:	2300      	movs	r3, #0
   d525a:	6063      	str	r3, [r4, #4]
   d525c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5260:	60a3      	str	r3, [r4, #8]
   d5262:	4b04      	ldr	r3, [pc, #16]	; (d5274 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5264:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5266:	4608      	mov	r0, r1
   d5268:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d526a:	4611      	mov	r1, r2
   d526c:	f7ff fa94 	bl	d4798 <HAL_I2C_Init>
}
   d5270:	4620      	mov	r0, r4
   d5272:	bd10      	pop	{r4, pc}
   d5274:	000d6780 	.word	0x000d6780

000d5278 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5278:	2300      	movs	r3, #0
   d527a:	461a      	mov	r2, r3
   d527c:	4619      	mov	r1, r3
   d527e:	7c00      	ldrb	r0, [r0, #16]
   d5280:	f7ff ba42 	b.w	d4708 <HAL_I2C_Begin>

000d5284 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5284:	b570      	push	{r4, r5, r6, lr}
   d5286:	460c      	mov	r4, r1
   d5288:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d528a:	2514      	movs	r5, #20
   d528c:	4606      	mov	r6, r0
   d528e:	462a      	mov	r2, r5
   d5290:	2100      	movs	r1, #0
   d5292:	a801      	add	r0, sp, #4
   d5294:	f001 f8b7 	bl	d6406 <memset>
   d5298:	7823      	ldrb	r3, [r4, #0]
   d529a:	f88d 3008 	strb.w	r3, [sp, #8]
   d529e:	6863      	ldr	r3, [r4, #4]
   d52a0:	9303      	str	r3, [sp, #12]
   d52a2:	68e3      	ldr	r3, [r4, #12]
   d52a4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d52a6:	2200      	movs	r2, #0
   d52a8:	7a23      	ldrb	r3, [r4, #8]
   d52aa:	7c30      	ldrb	r0, [r6, #16]
   d52ac:	f8ad 5004 	strh.w	r5, [sp, #4]
   d52b0:	a901      	add	r1, sp, #4
   d52b2:	9305      	str	r3, [sp, #20]
   d52b4:	f7ff fa78 	bl	d47a8 <HAL_I2C_Request_Data_Ex>
}
   d52b8:	b006      	add	sp, #24
   d52ba:	bd70      	pop	{r4, r5, r6, pc}

000d52bc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d52bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d52be:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d52c0:	f88d 1000 	strb.w	r1, [sp]
   d52c4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d52c8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d52ca:	bf18      	it	ne
   d52cc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d52ce:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d52d0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d52d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d52d6:	f7ff ffd5 	bl	d5284 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d52da:	b005      	add	sp, #20
   d52dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d52e0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d52e0:	2301      	movs	r3, #1
   d52e2:	f7ff bfeb 	b.w	d52bc <_ZN7TwoWire11requestFromEhjh>

000d52e6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d52e6:	2200      	movs	r2, #0
   d52e8:	7c00      	ldrb	r0, [r0, #16]
   d52ea:	f7ff ba15 	b.w	d4718 <HAL_I2C_Begin_Transmission>

000d52ee <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d52ee:	2200      	movs	r2, #0
   d52f0:	7c00      	ldrb	r0, [r0, #16]
   d52f2:	f7ff ba19 	b.w	d4728 <HAL_I2C_End_Transmission>

000d52f6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d52f6:	2100      	movs	r1, #0
   d52f8:	7c00      	ldrb	r0, [r0, #16]
   d52fa:	f7ff ba45 	b.w	d4788 <HAL_I2C_Is_Enabled>

000d52fe <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52fe:	2200      	movs	r2, #0
   d5300:	4611      	mov	r1, r2
   d5302:	6840      	ldr	r0, [r0, #4]
   d5304:	f7ff baec 	b.w	d48e0 <network_listening>

000d5308 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5308:	2200      	movs	r2, #0
   d530a:	4611      	mov	r1, r2
   d530c:	6840      	ldr	r0, [r0, #4]
   d530e:	f7ff baf7 	b.w	d4900 <network_get_listen_timeout>

000d5312 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5312:	2200      	movs	r2, #0
   d5314:	6840      	ldr	r0, [r0, #4]
   d5316:	f7ff baeb 	b.w	d48f0 <network_set_listen_timeout>

000d531a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d531a:	2200      	movs	r2, #0
   d531c:	f081 0101 	eor.w	r1, r1, #1
   d5320:	6840      	ldr	r0, [r0, #4]
   d5322:	f7ff bad5 	b.w	d48d0 <network_listen>

000d5326 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5326:	2300      	movs	r3, #0
   d5328:	461a      	mov	r2, r3
   d532a:	2101      	movs	r1, #1
   d532c:	6840      	ldr	r0, [r0, #4]
   d532e:	f7ff bac7 	b.w	d48c0 <network_off>

000d5332 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5332:	2300      	movs	r3, #0
   d5334:	461a      	mov	r2, r3
   d5336:	4619      	mov	r1, r3
   d5338:	6840      	ldr	r0, [r0, #4]
   d533a:	f7ff bab9 	b.w	d48b0 <network_on>

000d533e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d533e:	2200      	movs	r2, #0
   d5340:	4611      	mov	r1, r2
   d5342:	6840      	ldr	r0, [r0, #4]
   d5344:	f7ff baac 	b.w	d48a0 <network_ready>

000d5348 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5348:	2200      	movs	r2, #0
   d534a:	4611      	mov	r1, r2
   d534c:	6840      	ldr	r0, [r0, #4]
   d534e:	f7ff ba97 	b.w	d4880 <network_connecting>

000d5352 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5352:	2200      	movs	r2, #0
   d5354:	2102      	movs	r1, #2
   d5356:	6840      	ldr	r0, [r0, #4]
   d5358:	f7ff ba9a 	b.w	d4890 <network_disconnect>

000d535c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d535c:	2300      	movs	r3, #0
   d535e:	461a      	mov	r2, r3
   d5360:	6840      	ldr	r0, [r0, #4]
   d5362:	f7ff ba85 	b.w	d4870 <network_connect>

000d5366 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5366:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5368:	4605      	mov	r5, r0
   d536a:	b188      	cbz	r0, d5390 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d536c:	6804      	ldr	r4, [r0, #0]
   d536e:	b14c      	cbz	r4, d5384 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5370:	68a3      	ldr	r3, [r4, #8]
   d5372:	b11b      	cbz	r3, d537c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5374:	2203      	movs	r2, #3
   d5376:	4621      	mov	r1, r4
   d5378:	4620      	mov	r0, r4
   d537a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d537c:	2110      	movs	r1, #16
   d537e:	4620      	mov	r0, r4
   d5380:	f000 f9cc 	bl	d571c <_ZdlPvj>
   d5384:	4628      	mov	r0, r5
   d5386:	2114      	movs	r1, #20
      }
   d5388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d538c:	f000 b9c6 	b.w	d571c <_ZdlPvj>
   d5390:	bd38      	pop	{r3, r4, r5, pc}

000d5392 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5392:	b110      	cbz	r0, d539a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5394:	6803      	ldr	r3, [r0, #0]
   d5396:	685b      	ldr	r3, [r3, #4]
   d5398:	4718      	bx	r3
   d539a:	4770      	bx	lr

000d539c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d539c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d539e:	6803      	ldr	r3, [r0, #0]
   d53a0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d53a2:	b1bb      	cbz	r3, d53d4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d53a4:	6858      	ldr	r0, [r3, #4]
   d53a6:	f7ff f93f 	bl	d4628 <os_thread_is_current>
   d53aa:	b978      	cbnz	r0, d53cc <_ZN6ThreadD1Ev+0x30>
   d53ac:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d53ae:	7c5a      	ldrb	r2, [r3, #17]
   d53b0:	b912      	cbnz	r2, d53b8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d53b2:	6858      	ldr	r0, [r3, #4]
   d53b4:	f7ff f940 	bl	d4638 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d53b8:	6823      	ldr	r3, [r4, #0]
   d53ba:	6858      	ldr	r0, [r3, #4]
   d53bc:	f7ff f944 	bl	d4648 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53c2:	2300      	movs	r3, #0
   d53c4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53c6:	b128      	cbz	r0, d53d4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d53c8:	f7ff ffcd 	bl	d5366 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53cc:	6820      	ldr	r0, [r4, #0]
   d53ce:	b108      	cbz	r0, d53d4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d53d0:	f7ff ffc9 	bl	d5366 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d53d4:	4620      	mov	r0, r4
   d53d6:	bd10      	pop	{r4, pc}

000d53d8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d53d8:	b538      	push	{r3, r4, r5, lr}
   d53da:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53dc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d53e0:	b108      	cbz	r0, d53e6 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d53e2:	f7fe fe5e 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d53e6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d53ea:	b108      	cbz	r0, d53f0 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d53ec:	f7ff f93c 	bl	d4668 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53f0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d53f4:	b135      	cbz	r5, d5404 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53f6:	4628      	mov	r0, r5
   d53f8:	f7ff ffd0 	bl	d539c <_ZN6ThreadD1Ev>
   d53fc:	2104      	movs	r1, #4
   d53fe:	4628      	mov	r0, r5
   d5400:	f000 f98c 	bl	d571c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5404:	6820      	ldr	r0, [r4, #0]
   d5406:	b108      	cbz	r0, d540c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5408:	f7ff ffc3 	bl	d5392 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d540c:	4620      	mov	r0, r4
   d540e:	bd38      	pop	{r3, r4, r5, pc}

000d5410 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5410:	b510      	push	{r4, lr}
   d5412:	4b04      	ldr	r3, [pc, #16]	; (d5424 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5414:	4604      	mov	r4, r0
   d5416:	f840 3b08 	str.w	r3, [r0], #8
   d541a:	f7ff ffdd 	bl	d53d8 <_ZN5spark11MeshPublishD1Ev>
   d541e:	4620      	mov	r0, r4
   d5420:	bd10      	pop	{r4, pc}
   d5422:	bf00      	nop
   d5424:	000d67a8 	.word	0x000d67a8

000d5428 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5428:	b538      	push	{r3, r4, r5, lr}
   d542a:	4c0e      	ldr	r4, [pc, #56]	; (d5464 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d542c:	4b0e      	ldr	r3, [pc, #56]	; (d5468 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d542e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5430:	2500      	movs	r5, #0
   d5432:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5434:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5438:	6063      	str	r3, [r4, #4]
   d543a:	60a5      	str	r5, [r4, #8]
   d543c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5440:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5444:	f7ff f908 	bl	d4658 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5448:	4b08      	ldr	r3, [pc, #32]	; (d546c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d544a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d544e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5452:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5454:	4620      	mov	r0, r4
   d5456:	4a06      	ldr	r2, [pc, #24]	; (d5470 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5458:	4906      	ldr	r1, [pc, #24]	; (d5474 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d545a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d545e:	f000 b94f 	b.w	d5700 <__aeabi_atexit>
   d5462:	bf00      	nop
   d5464:	2003e554 	.word	0x2003e554
   d5468:	000d67dc 	.word	0x000d67dc
   d546c:	000d67a8 	.word	0x000d67a8
   d5470:	2003e48c 	.word	0x2003e48c
   d5474:	000d5411 	.word	0x000d5411

000d5478 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5478:	2300      	movs	r3, #0
   d547a:	461a      	mov	r2, r3
   d547c:	6840      	ldr	r0, [r0, #4]
   d547e:	f7ff b9f7 	b.w	d4870 <network_connect>

000d5482 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5482:	2200      	movs	r2, #0
   d5484:	2102      	movs	r1, #2
   d5486:	6840      	ldr	r0, [r0, #4]
   d5488:	f7ff ba02 	b.w	d4890 <network_disconnect>

000d548c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d548c:	2200      	movs	r2, #0
   d548e:	4611      	mov	r1, r2
   d5490:	6840      	ldr	r0, [r0, #4]
   d5492:	f7ff b9f5 	b.w	d4880 <network_connecting>

000d5496 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5496:	2200      	movs	r2, #0
   d5498:	4611      	mov	r1, r2
   d549a:	6840      	ldr	r0, [r0, #4]
   d549c:	f7ff ba00 	b.w	d48a0 <network_ready>

000d54a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d54a0:	2300      	movs	r3, #0
   d54a2:	461a      	mov	r2, r3
   d54a4:	4619      	mov	r1, r3
   d54a6:	6840      	ldr	r0, [r0, #4]
   d54a8:	f7ff ba02 	b.w	d48b0 <network_on>

000d54ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d54ac:	2300      	movs	r3, #0
   d54ae:	461a      	mov	r2, r3
   d54b0:	4619      	mov	r1, r3
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	f7ff ba04 	b.w	d48c0 <network_off>

000d54b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d54b8:	2200      	movs	r2, #0
   d54ba:	f081 0101 	eor.w	r1, r1, #1
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	f7ff ba06 	b.w	d48d0 <network_listen>

000d54c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d54c4:	2200      	movs	r2, #0
   d54c6:	6840      	ldr	r0, [r0, #4]
   d54c8:	f7ff ba12 	b.w	d48f0 <network_set_listen_timeout>

000d54cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d54cc:	2200      	movs	r2, #0
   d54ce:	4611      	mov	r1, r2
   d54d0:	6840      	ldr	r0, [r0, #4]
   d54d2:	f7ff ba15 	b.w	d4900 <network_get_listen_timeout>

000d54d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d54d6:	2200      	movs	r2, #0
   d54d8:	4611      	mov	r1, r2
   d54da:	6840      	ldr	r0, [r0, #4]
   d54dc:	f7ff ba00 	b.w	d48e0 <network_listening>

000d54e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d54e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d54e4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d54e6:	b095      	sub	sp, #84	; 0x54
   d54e8:	4616      	mov	r6, r2
   d54ea:	460d      	mov	r5, r1
   d54ec:	4607      	mov	r7, r0
    IPAddress addr;
   d54ee:	f7ff fcdd 	bl	d4eac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d54f2:	4621      	mov	r1, r4
   d54f4:	2220      	movs	r2, #32
   d54f6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d54f8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d54fa:	f000 ff84 	bl	d6406 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d54fe:	2340      	movs	r3, #64	; 0x40
   d5500:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5502:	4621      	mov	r1, r4
   d5504:	466b      	mov	r3, sp
   d5506:	aa0c      	add	r2, sp, #48	; 0x30
   d5508:	4630      	mov	r0, r6
   d550a:	f7ff f845 	bl	d4598 <netdb_getaddrinfo>
    if (!r) {
   d550e:	4604      	mov	r4, r0
   d5510:	2800      	cmp	r0, #0
   d5512:	d144      	bne.n	d559e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5514:	4602      	mov	r2, r0
   d5516:	2101      	movs	r1, #1
   d5518:	6868      	ldr	r0, [r5, #4]
   d551a:	f7ff f9c1 	bl	d48a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d551e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5520:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5522:	4622      	mov	r2, r4
   d5524:	6868      	ldr	r0, [r5, #4]
   d5526:	f7ff f9bb 	bl	d48a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d552a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d552c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d552e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5530:	2e00      	cmp	r6, #0
   d5532:	d034      	beq.n	d559e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5534:	2900      	cmp	r1, #0
   d5536:	d132      	bne.n	d559e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5538:	6873      	ldr	r3, [r6, #4]
   d553a:	2b02      	cmp	r3, #2
   d553c:	d002      	beq.n	d5544 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d553e:	2b0a      	cmp	r3, #10
   d5540:	d009      	beq.n	d5556 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5542:	e02a      	b.n	d559a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5544:	f1b8 0f00 	cmp.w	r8, #0
   d5548:	d027      	beq.n	d559a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d554a:	6971      	ldr	r1, [r6, #20]
   d554c:	4638      	mov	r0, r7
   d554e:	3104      	adds	r1, #4
   d5550:	f7ff fcd9 	bl	d4f06 <_ZN9IPAddressaSEPKh>
   d5554:	e020      	b.n	d5598 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5556:	f1b9 0f00 	cmp.w	r9, #0
   d555a:	d01e      	beq.n	d559a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d555c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d555e:	2211      	movs	r2, #17
   d5560:	a801      	add	r0, sp, #4
   d5562:	f000 ff50 	bl	d6406 <memset>
                    a.v = 6;
   d5566:	2306      	movs	r3, #6
   d5568:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d556c:	ad01      	add	r5, sp, #4
   d556e:	f104 0308 	add.w	r3, r4, #8
   d5572:	3418      	adds	r4, #24
   d5574:	6818      	ldr	r0, [r3, #0]
   d5576:	6859      	ldr	r1, [r3, #4]
   d5578:	462a      	mov	r2, r5
   d557a:	c203      	stmia	r2!, {r0, r1}
   d557c:	3308      	adds	r3, #8
   d557e:	42a3      	cmp	r3, r4
   d5580:	4615      	mov	r5, r2
   d5582:	d1f7      	bne.n	d5574 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5584:	a901      	add	r1, sp, #4
   d5586:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5588:	ad07      	add	r5, sp, #28
   d558a:	f7ff fc9d 	bl	d4ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d558e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5590:	1d3c      	adds	r4, r7, #4
   d5592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5594:	682b      	ldr	r3, [r5, #0]
   d5596:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5598:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d559a:	69f6      	ldr	r6, [r6, #28]
   d559c:	e7c8      	b.n	d5530 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d559e:	9800      	ldr	r0, [sp, #0]
   d55a0:	f7fe fff2 	bl	d4588 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55a4:	4638      	mov	r0, r7
   d55a6:	b015      	add	sp, #84	; 0x54
   d55a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d55ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d55ac:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d55ae:	4a03      	ldr	r2, [pc, #12]	; (d55bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d55b0:	601a      	str	r2, [r3, #0]
   d55b2:	2200      	movs	r2, #0
   d55b4:	605a      	str	r2, [r3, #4]
   d55b6:	4770      	bx	lr
   d55b8:	2003e728 	.word	0x2003e728
   d55bc:	000d67dc 	.word	0x000d67dc

000d55c0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d55c0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d55c2:	4e18      	ldr	r6, [pc, #96]	; (d5624 <pinAvailable+0x64>)
   d55c4:	6831      	ldr	r1, [r6, #0]
   d55c6:	f011 0501 	ands.w	r5, r1, #1
   d55ca:	4604      	mov	r4, r0
   d55cc:	d10a      	bne.n	d55e4 <pinAvailable+0x24>
   d55ce:	4630      	mov	r0, r6
   d55d0:	f7fe fd69 	bl	d40a6 <__cxa_guard_acquire>
   d55d4:	b130      	cbz	r0, d55e4 <pinAvailable+0x24>
   d55d6:	4629      	mov	r1, r5
   d55d8:	4813      	ldr	r0, [pc, #76]	; (d5628 <pinAvailable+0x68>)
   d55da:	f7ff f9ef 	bl	d49bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d55de:	4630      	mov	r0, r6
   d55e0:	f7fe fd66 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d55e4:	4810      	ldr	r0, [pc, #64]	; (d5628 <pinAvailable+0x68>)
   d55e6:	f7ff f9f3 	bl	d49d0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d55ea:	b128      	cbz	r0, d55f8 <pinAvailable+0x38>
   d55ec:	f1a4 030b 	sub.w	r3, r4, #11
   d55f0:	2b02      	cmp	r3, #2
   d55f2:	d801      	bhi.n	d55f8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d55f4:	2000      	movs	r0, #0
   d55f6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d55f8:	f000 f85c 	bl	d56b4 <_Z19__fetch_global_Wirev>
   d55fc:	f7ff fe7b 	bl	d52f6 <_ZN7TwoWire9isEnabledEv>
   d5600:	b108      	cbz	r0, d5606 <pinAvailable+0x46>
   d5602:	2c01      	cmp	r4, #1
   d5604:	d9f6      	bls.n	d55f4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5606:	f7ff fdb9 	bl	d517c <_Z22__fetch_global_Serial1v>
   d560a:	f7ff fdb3 	bl	d5174 <_ZN11USARTSerial9isEnabledEv>
   d560e:	b118      	cbz	r0, d5618 <pinAvailable+0x58>
   d5610:	f1a4 0309 	sub.w	r3, r4, #9
   d5614:	2b01      	cmp	r3, #1
   d5616:	d9ed      	bls.n	d55f4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5618:	2c23      	cmp	r4, #35	; 0x23
   d561a:	bf8c      	ite	hi
   d561c:	2000      	movhi	r0, #0
   d561e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5620:	bd70      	pop	{r4, r5, r6, pc}
   d5622:	bf00      	nop
   d5624:	2003e4a4 	.word	0x2003e4a4
   d5628:	2003e4a8 	.word	0x2003e4a8

000d562c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d562c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d562e:	b538      	push	{r3, r4, r5, lr}
   d5630:	4604      	mov	r4, r0
   d5632:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5634:	d80a      	bhi.n	d564c <pinMode+0x20>
   d5636:	29ff      	cmp	r1, #255	; 0xff
   d5638:	d008      	beq.n	d564c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d563a:	f7ff ffc1 	bl	d55c0 <pinAvailable>
   d563e:	b128      	cbz	r0, d564c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5640:	4629      	mov	r1, r5
   d5642:	4620      	mov	r0, r4
}
   d5644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5648:	f7fe bfb6 	b.w	d45b8 <HAL_Pin_Mode>
   d564c:	bd38      	pop	{r3, r4, r5, pc}

000d564e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d564e:	b538      	push	{r3, r4, r5, lr}
   d5650:	4604      	mov	r4, r0
   d5652:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5654:	f7fe ffb8 	bl	d45c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5658:	28ff      	cmp	r0, #255	; 0xff
   d565a:	d010      	beq.n	d567e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d565c:	2806      	cmp	r0, #6
   d565e:	d804      	bhi.n	d566a <digitalWrite+0x1c>
   d5660:	234d      	movs	r3, #77	; 0x4d
   d5662:	fa23 f000 	lsr.w	r0, r3, r0
   d5666:	07c3      	lsls	r3, r0, #31
   d5668:	d409      	bmi.n	d567e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d566a:	4620      	mov	r0, r4
   d566c:	f7ff ffa8 	bl	d55c0 <pinAvailable>
   d5670:	b128      	cbz	r0, d567e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5672:	4629      	mov	r1, r5
   d5674:	4620      	mov	r0, r4
}
   d5676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d567a:	f7fe bfad 	b.w	d45d8 <HAL_GPIO_Write>
   d567e:	bd38      	pop	{r3, r4, r5, pc}

000d5680 <_Z17acquireWireBufferv>:
   d5680:	b570      	push	{r4, r5, r6, lr}
   d5682:	4604      	mov	r4, r0
   d5684:	2514      	movs	r5, #20
   d5686:	462a      	mov	r2, r5
   d5688:	4e09      	ldr	r6, [pc, #36]	; (d56b0 <_Z17acquireWireBufferv+0x30>)
   d568a:	2100      	movs	r1, #0
   d568c:	f000 febb 	bl	d6406 <memset>
   d5690:	8025      	strh	r5, [r4, #0]
   d5692:	2520      	movs	r5, #32
   d5694:	4631      	mov	r1, r6
   d5696:	60a5      	str	r5, [r4, #8]
   d5698:	6125      	str	r5, [r4, #16]
   d569a:	4628      	mov	r0, r5
   d569c:	f000 f840 	bl	d5720 <_ZnajRKSt9nothrow_t>
   d56a0:	4631      	mov	r1, r6
   d56a2:	6060      	str	r0, [r4, #4]
   d56a4:	4628      	mov	r0, r5
   d56a6:	f000 f83b 	bl	d5720 <_ZnajRKSt9nothrow_t>
   d56aa:	60e0      	str	r0, [r4, #12]
   d56ac:	4620      	mov	r0, r4
   d56ae:	bd70      	pop	{r4, r5, r6, pc}
   d56b0:	000d6808 	.word	0x000d6808

000d56b4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d56b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d56b6:	4d0e      	ldr	r5, [pc, #56]	; (d56f0 <_Z19__fetch_global_Wirev+0x3c>)
   d56b8:	6829      	ldr	r1, [r5, #0]
   d56ba:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d56be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d56c0:	d113      	bne.n	d56ea <_Z19__fetch_global_Wirev+0x36>
   d56c2:	4628      	mov	r0, r5
   d56c4:	f7fe fcef 	bl	d40a6 <__cxa_guard_acquire>
   d56c8:	b178      	cbz	r0, d56ea <_Z19__fetch_global_Wirev+0x36>
   d56ca:	a801      	add	r0, sp, #4
   d56cc:	f7ff ffd8 	bl	d5680 <_Z17acquireWireBufferv>
   d56d0:	aa01      	add	r2, sp, #4
   d56d2:	4621      	mov	r1, r4
   d56d4:	4807      	ldr	r0, [pc, #28]	; (d56f4 <_Z19__fetch_global_Wirev+0x40>)
   d56d6:	f7ff fdbd 	bl	d5254 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d56da:	4628      	mov	r0, r5
   d56dc:	f7fe fce8 	bl	d40b0 <__cxa_guard_release>
   d56e0:	4a05      	ldr	r2, [pc, #20]	; (d56f8 <_Z19__fetch_global_Wirev+0x44>)
   d56e2:	4906      	ldr	r1, [pc, #24]	; (d56fc <_Z19__fetch_global_Wirev+0x48>)
   d56e4:	4803      	ldr	r0, [pc, #12]	; (d56f4 <_Z19__fetch_global_Wirev+0x40>)
   d56e6:	f000 f80b 	bl	d5700 <__aeabi_atexit>
	return wire;
}
   d56ea:	4802      	ldr	r0, [pc, #8]	; (d56f4 <_Z19__fetch_global_Wirev+0x40>)
   d56ec:	b007      	add	sp, #28
   d56ee:	bd30      	pop	{r4, r5, pc}
   d56f0:	2003e734 	.word	0x2003e734
   d56f4:	2003e738 	.word	0x2003e738
   d56f8:	2003e48c 	.word	0x2003e48c
   d56fc:	000d51fd 	.word	0x000d51fd

000d5700 <__aeabi_atexit>:
   d5700:	460b      	mov	r3, r1
   d5702:	4601      	mov	r1, r0
   d5704:	4618      	mov	r0, r3
   d5706:	f000 be65 	b.w	d63d4 <__cxa_atexit>
	...

000d570c <_ZSt15get_new_handlerv>:
   d570c:	4b02      	ldr	r3, [pc, #8]	; (d5718 <_ZSt15get_new_handlerv+0xc>)
   d570e:	6818      	ldr	r0, [r3, #0]
   d5710:	f3bf 8f5f 	dmb	sy
   d5714:	4770      	bx	lr
   d5716:	bf00      	nop
   d5718:	2003e74c 	.word	0x2003e74c

000d571c <_ZdlPvj>:
   d571c:	f7fe bcbf 	b.w	d409e <_ZdlPv>

000d5720 <_ZnajRKSt9nothrow_t>:
   d5720:	f000 b800 	b.w	d5724 <_ZnwjRKSt9nothrow_t>

000d5724 <_ZnwjRKSt9nothrow_t>:
   d5724:	b510      	push	{r4, lr}
   d5726:	2800      	cmp	r0, #0
   d5728:	bf14      	ite	ne
   d572a:	4604      	movne	r4, r0
   d572c:	2401      	moveq	r4, #1
   d572e:	4620      	mov	r0, r4
   d5730:	f7ff f8f6 	bl	d4920 <malloc>
   d5734:	b920      	cbnz	r0, d5740 <_ZnwjRKSt9nothrow_t+0x1c>
   d5736:	f7ff ffe9 	bl	d570c <_ZSt15get_new_handlerv>
   d573a:	b108      	cbz	r0, d5740 <_ZnwjRKSt9nothrow_t+0x1c>
   d573c:	4780      	blx	r0
   d573e:	e7f6      	b.n	d572e <_ZnwjRKSt9nothrow_t+0xa>
   d5740:	bd10      	pop	{r4, pc}
	...

000d5744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5744:	4b18      	ldr	r3, [pc, #96]	; (d57a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5746:	681a      	ldr	r2, [r3, #0]
   d5748:	07d1      	lsls	r1, r2, #31
   d574a:	bf5c      	itt	pl
   d574c:	2201      	movpl	r2, #1
   d574e:	601a      	strpl	r2, [r3, #0]
   d5750:	4b16      	ldr	r3, [pc, #88]	; (d57ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5752:	681a      	ldr	r2, [r3, #0]
   d5754:	07d2      	lsls	r2, r2, #31
   d5756:	bf5c      	itt	pl
   d5758:	2201      	movpl	r2, #1
   d575a:	601a      	strpl	r2, [r3, #0]
   d575c:	4b14      	ldr	r3, [pc, #80]	; (d57b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d575e:	681a      	ldr	r2, [r3, #0]
   d5760:	07d0      	lsls	r0, r2, #31
   d5762:	bf5c      	itt	pl
   d5764:	2201      	movpl	r2, #1
   d5766:	601a      	strpl	r2, [r3, #0]
   d5768:	4b12      	ldr	r3, [pc, #72]	; (d57b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d576a:	681a      	ldr	r2, [r3, #0]
   d576c:	07d1      	lsls	r1, r2, #31
   d576e:	bf5c      	itt	pl
   d5770:	2201      	movpl	r2, #1
   d5772:	601a      	strpl	r2, [r3, #0]
   d5774:	4b10      	ldr	r3, [pc, #64]	; (d57b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5776:	681a      	ldr	r2, [r3, #0]
   d5778:	07d2      	lsls	r2, r2, #31
   d577a:	bf5c      	itt	pl
   d577c:	2201      	movpl	r2, #1
   d577e:	601a      	strpl	r2, [r3, #0]
   d5780:	4b0e      	ldr	r3, [pc, #56]	; (d57bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5782:	681a      	ldr	r2, [r3, #0]
   d5784:	07d0      	lsls	r0, r2, #31
   d5786:	bf5c      	itt	pl
   d5788:	2201      	movpl	r2, #1
   d578a:	601a      	strpl	r2, [r3, #0]
   d578c:	4b0c      	ldr	r3, [pc, #48]	; (d57c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d578e:	681a      	ldr	r2, [r3, #0]
   d5790:	07d1      	lsls	r1, r2, #31
   d5792:	bf5c      	itt	pl
   d5794:	2201      	movpl	r2, #1
   d5796:	601a      	strpl	r2, [r3, #0]
   d5798:	4b0a      	ldr	r3, [pc, #40]	; (d57c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d579a:	681a      	ldr	r2, [r3, #0]
   d579c:	07d2      	lsls	r2, r2, #31
   d579e:	bf5c      	itt	pl
   d57a0:	2201      	movpl	r2, #1
   d57a2:	601a      	strpl	r2, [r3, #0]
   d57a4:	4770      	bx	lr
   d57a6:	bf00      	nop
   d57a8:	2003e76c 	.word	0x2003e76c
   d57ac:	2003e768 	.word	0x2003e768
   d57b0:	2003e764 	.word	0x2003e764
   d57b4:	2003e760 	.word	0x2003e760
   d57b8:	2003e75c 	.word	0x2003e75c
   d57bc:	2003e758 	.word	0x2003e758
   d57c0:	2003e754 	.word	0x2003e754
   d57c4:	2003e750 	.word	0x2003e750

000d57c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d57c8:	4b24      	ldr	r3, [pc, #144]	; (d585c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d57ca:	681a      	ldr	r2, [r3, #0]
   d57cc:	07d0      	lsls	r0, r2, #31
   d57ce:	bf5c      	itt	pl
   d57d0:	2201      	movpl	r2, #1
   d57d2:	601a      	strpl	r2, [r3, #0]
   d57d4:	4b22      	ldr	r3, [pc, #136]	; (d5860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d57d6:	681a      	ldr	r2, [r3, #0]
   d57d8:	07d1      	lsls	r1, r2, #31
   d57da:	bf5c      	itt	pl
   d57dc:	2201      	movpl	r2, #1
   d57de:	601a      	strpl	r2, [r3, #0]
   d57e0:	4b20      	ldr	r3, [pc, #128]	; (d5864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d57e2:	681a      	ldr	r2, [r3, #0]
   d57e4:	07d2      	lsls	r2, r2, #31
   d57e6:	bf5c      	itt	pl
   d57e8:	2201      	movpl	r2, #1
   d57ea:	601a      	strpl	r2, [r3, #0]
   d57ec:	4b1e      	ldr	r3, [pc, #120]	; (d5868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d57ee:	681a      	ldr	r2, [r3, #0]
   d57f0:	07d0      	lsls	r0, r2, #31
   d57f2:	bf5c      	itt	pl
   d57f4:	2201      	movpl	r2, #1
   d57f6:	601a      	strpl	r2, [r3, #0]
   d57f8:	4b1c      	ldr	r3, [pc, #112]	; (d586c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d57fa:	681a      	ldr	r2, [r3, #0]
   d57fc:	07d1      	lsls	r1, r2, #31
   d57fe:	bf5c      	itt	pl
   d5800:	2201      	movpl	r2, #1
   d5802:	601a      	strpl	r2, [r3, #0]
   d5804:	4b1a      	ldr	r3, [pc, #104]	; (d5870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5806:	681a      	ldr	r2, [r3, #0]
   d5808:	07d2      	lsls	r2, r2, #31
   d580a:	bf5c      	itt	pl
   d580c:	2201      	movpl	r2, #1
   d580e:	601a      	strpl	r2, [r3, #0]
   d5810:	4b18      	ldr	r3, [pc, #96]	; (d5874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5812:	681a      	ldr	r2, [r3, #0]
   d5814:	07d0      	lsls	r0, r2, #31
   d5816:	bf5c      	itt	pl
   d5818:	2201      	movpl	r2, #1
   d581a:	601a      	strpl	r2, [r3, #0]
   d581c:	4b16      	ldr	r3, [pc, #88]	; (d5878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d581e:	681a      	ldr	r2, [r3, #0]
   d5820:	07d1      	lsls	r1, r2, #31
   d5822:	bf5c      	itt	pl
   d5824:	2201      	movpl	r2, #1
   d5826:	601a      	strpl	r2, [r3, #0]
   d5828:	4b14      	ldr	r3, [pc, #80]	; (d587c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d582a:	681a      	ldr	r2, [r3, #0]
   d582c:	07d2      	lsls	r2, r2, #31
   d582e:	bf5c      	itt	pl
   d5830:	2201      	movpl	r2, #1
   d5832:	601a      	strpl	r2, [r3, #0]
   d5834:	4b12      	ldr	r3, [pc, #72]	; (d5880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5836:	681a      	ldr	r2, [r3, #0]
   d5838:	07d0      	lsls	r0, r2, #31
   d583a:	bf5c      	itt	pl
   d583c:	2201      	movpl	r2, #1
   d583e:	601a      	strpl	r2, [r3, #0]
   d5840:	4b10      	ldr	r3, [pc, #64]	; (d5884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5842:	681a      	ldr	r2, [r3, #0]
   d5844:	07d1      	lsls	r1, r2, #31
   d5846:	bf5c      	itt	pl
   d5848:	2201      	movpl	r2, #1
   d584a:	601a      	strpl	r2, [r3, #0]
   d584c:	4b0e      	ldr	r3, [pc, #56]	; (d5888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d584e:	681a      	ldr	r2, [r3, #0]
   d5850:	07d2      	lsls	r2, r2, #31
   d5852:	bf5c      	itt	pl
   d5854:	2201      	movpl	r2, #1
   d5856:	601a      	strpl	r2, [r3, #0]
   d5858:	4770      	bx	lr
   d585a:	bf00      	nop
   d585c:	2003e79c 	.word	0x2003e79c
   d5860:	2003e798 	.word	0x2003e798
   d5864:	2003e794 	.word	0x2003e794
   d5868:	2003e790 	.word	0x2003e790
   d586c:	2003e78c 	.word	0x2003e78c
   d5870:	2003e788 	.word	0x2003e788
   d5874:	2003e784 	.word	0x2003e784
   d5878:	2003e780 	.word	0x2003e780
   d587c:	2003e77c 	.word	0x2003e77c
   d5880:	2003e778 	.word	0x2003e778
   d5884:	2003e774 	.word	0x2003e774
   d5888:	2003e770 	.word	0x2003e770

000d588c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d588c:	4b24      	ldr	r3, [pc, #144]	; (d5920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d588e:	681a      	ldr	r2, [r3, #0]
   d5890:	07d0      	lsls	r0, r2, #31
   d5892:	bf5c      	itt	pl
   d5894:	2201      	movpl	r2, #1
   d5896:	601a      	strpl	r2, [r3, #0]
   d5898:	4b22      	ldr	r3, [pc, #136]	; (d5924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d589a:	681a      	ldr	r2, [r3, #0]
   d589c:	07d1      	lsls	r1, r2, #31
   d589e:	bf5c      	itt	pl
   d58a0:	2201      	movpl	r2, #1
   d58a2:	601a      	strpl	r2, [r3, #0]
   d58a4:	4b20      	ldr	r3, [pc, #128]	; (d5928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d58a6:	681a      	ldr	r2, [r3, #0]
   d58a8:	07d2      	lsls	r2, r2, #31
   d58aa:	bf5c      	itt	pl
   d58ac:	2201      	movpl	r2, #1
   d58ae:	601a      	strpl	r2, [r3, #0]
   d58b0:	4b1e      	ldr	r3, [pc, #120]	; (d592c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d58b2:	681a      	ldr	r2, [r3, #0]
   d58b4:	07d0      	lsls	r0, r2, #31
   d58b6:	bf5c      	itt	pl
   d58b8:	2201      	movpl	r2, #1
   d58ba:	601a      	strpl	r2, [r3, #0]
   d58bc:	4b1c      	ldr	r3, [pc, #112]	; (d5930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d58be:	681a      	ldr	r2, [r3, #0]
   d58c0:	07d1      	lsls	r1, r2, #31
   d58c2:	bf5c      	itt	pl
   d58c4:	2201      	movpl	r2, #1
   d58c6:	601a      	strpl	r2, [r3, #0]
   d58c8:	4b1a      	ldr	r3, [pc, #104]	; (d5934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d58ca:	681a      	ldr	r2, [r3, #0]
   d58cc:	07d2      	lsls	r2, r2, #31
   d58ce:	bf5c      	itt	pl
   d58d0:	2201      	movpl	r2, #1
   d58d2:	601a      	strpl	r2, [r3, #0]
   d58d4:	4b18      	ldr	r3, [pc, #96]	; (d5938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d58d6:	681a      	ldr	r2, [r3, #0]
   d58d8:	07d0      	lsls	r0, r2, #31
   d58da:	bf5c      	itt	pl
   d58dc:	2201      	movpl	r2, #1
   d58de:	601a      	strpl	r2, [r3, #0]
   d58e0:	4b16      	ldr	r3, [pc, #88]	; (d593c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d58e2:	681a      	ldr	r2, [r3, #0]
   d58e4:	07d1      	lsls	r1, r2, #31
   d58e6:	bf5c      	itt	pl
   d58e8:	2201      	movpl	r2, #1
   d58ea:	601a      	strpl	r2, [r3, #0]
   d58ec:	4b14      	ldr	r3, [pc, #80]	; (d5940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d58ee:	681a      	ldr	r2, [r3, #0]
   d58f0:	07d2      	lsls	r2, r2, #31
   d58f2:	bf5c      	itt	pl
   d58f4:	2201      	movpl	r2, #1
   d58f6:	601a      	strpl	r2, [r3, #0]
   d58f8:	4b12      	ldr	r3, [pc, #72]	; (d5944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d58fa:	681a      	ldr	r2, [r3, #0]
   d58fc:	07d0      	lsls	r0, r2, #31
   d58fe:	bf5c      	itt	pl
   d5900:	2201      	movpl	r2, #1
   d5902:	601a      	strpl	r2, [r3, #0]
   d5904:	4b10      	ldr	r3, [pc, #64]	; (d5948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5906:	681a      	ldr	r2, [r3, #0]
   d5908:	07d1      	lsls	r1, r2, #31
   d590a:	bf5c      	itt	pl
   d590c:	2201      	movpl	r2, #1
   d590e:	601a      	strpl	r2, [r3, #0]
   d5910:	4b0e      	ldr	r3, [pc, #56]	; (d594c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5912:	681a      	ldr	r2, [r3, #0]
   d5914:	07d2      	lsls	r2, r2, #31
   d5916:	bf5c      	itt	pl
   d5918:	2201      	movpl	r2, #1
   d591a:	601a      	strpl	r2, [r3, #0]
   d591c:	4770      	bx	lr
   d591e:	bf00      	nop
   d5920:	2003e7cc 	.word	0x2003e7cc
   d5924:	2003e7c8 	.word	0x2003e7c8
   d5928:	2003e7c4 	.word	0x2003e7c4
   d592c:	2003e7c0 	.word	0x2003e7c0
   d5930:	2003e7bc 	.word	0x2003e7bc
   d5934:	2003e7b8 	.word	0x2003e7b8
   d5938:	2003e7b4 	.word	0x2003e7b4
   d593c:	2003e7b0 	.word	0x2003e7b0
   d5940:	2003e7ac 	.word	0x2003e7ac
   d5944:	2003e7a8 	.word	0x2003e7a8
   d5948:	2003e7a4 	.word	0x2003e7a4
   d594c:	2003e7a0 	.word	0x2003e7a0

000d5950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5950:	4b18      	ldr	r3, [pc, #96]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5952:	681a      	ldr	r2, [r3, #0]
   d5954:	07d1      	lsls	r1, r2, #31
   d5956:	bf5c      	itt	pl
   d5958:	2201      	movpl	r2, #1
   d595a:	601a      	strpl	r2, [r3, #0]
   d595c:	4b16      	ldr	r3, [pc, #88]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d595e:	681a      	ldr	r2, [r3, #0]
   d5960:	07d2      	lsls	r2, r2, #31
   d5962:	bf5c      	itt	pl
   d5964:	2201      	movpl	r2, #1
   d5966:	601a      	strpl	r2, [r3, #0]
   d5968:	4b14      	ldr	r3, [pc, #80]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d596a:	681a      	ldr	r2, [r3, #0]
   d596c:	07d0      	lsls	r0, r2, #31
   d596e:	bf5c      	itt	pl
   d5970:	2201      	movpl	r2, #1
   d5972:	601a      	strpl	r2, [r3, #0]
   d5974:	4b12      	ldr	r3, [pc, #72]	; (d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5976:	681a      	ldr	r2, [r3, #0]
   d5978:	07d1      	lsls	r1, r2, #31
   d597a:	bf5c      	itt	pl
   d597c:	2201      	movpl	r2, #1
   d597e:	601a      	strpl	r2, [r3, #0]
   d5980:	4b10      	ldr	r3, [pc, #64]	; (d59c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5982:	681a      	ldr	r2, [r3, #0]
   d5984:	07d2      	lsls	r2, r2, #31
   d5986:	bf5c      	itt	pl
   d5988:	2201      	movpl	r2, #1
   d598a:	601a      	strpl	r2, [r3, #0]
   d598c:	4b0e      	ldr	r3, [pc, #56]	; (d59c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d598e:	681a      	ldr	r2, [r3, #0]
   d5990:	07d0      	lsls	r0, r2, #31
   d5992:	bf5c      	itt	pl
   d5994:	2201      	movpl	r2, #1
   d5996:	601a      	strpl	r2, [r3, #0]
   d5998:	4b0c      	ldr	r3, [pc, #48]	; (d59cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d599a:	681a      	ldr	r2, [r3, #0]
   d599c:	07d1      	lsls	r1, r2, #31
   d599e:	bf5c      	itt	pl
   d59a0:	2201      	movpl	r2, #1
   d59a2:	601a      	strpl	r2, [r3, #0]
   d59a4:	4b0a      	ldr	r3, [pc, #40]	; (d59d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d59a6:	681a      	ldr	r2, [r3, #0]
   d59a8:	07d2      	lsls	r2, r2, #31
   d59aa:	bf5c      	itt	pl
   d59ac:	2201      	movpl	r2, #1
   d59ae:	601a      	strpl	r2, [r3, #0]
   d59b0:	4770      	bx	lr
   d59b2:	bf00      	nop
   d59b4:	2003e7ec 	.word	0x2003e7ec
   d59b8:	2003e7e8 	.word	0x2003e7e8
   d59bc:	2003e7e4 	.word	0x2003e7e4
   d59c0:	2003e7e0 	.word	0x2003e7e0
   d59c4:	2003e7dc 	.word	0x2003e7dc
   d59c8:	2003e7d8 	.word	0x2003e7d8
   d59cc:	2003e7d4 	.word	0x2003e7d4
   d59d0:	2003e7d0 	.word	0x2003e7d0

000d59d4 <__aeabi_drsub>:
   d59d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d59d8:	e002      	b.n	d59e0 <__adddf3>
   d59da:	bf00      	nop

000d59dc <__aeabi_dsub>:
   d59dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d59e0 <__adddf3>:
   d59e0:	b530      	push	{r4, r5, lr}
   d59e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d59e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d59ea:	ea94 0f05 	teq	r4, r5
   d59ee:	bf08      	it	eq
   d59f0:	ea90 0f02 	teqeq	r0, r2
   d59f4:	bf1f      	itttt	ne
   d59f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d59fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d59fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5a02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5a06:	f000 80e2 	beq.w	d5bce <__adddf3+0x1ee>
   d5a0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5a0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5a12:	bfb8      	it	lt
   d5a14:	426d      	neglt	r5, r5
   d5a16:	dd0c      	ble.n	d5a32 <__adddf3+0x52>
   d5a18:	442c      	add	r4, r5
   d5a1a:	ea80 0202 	eor.w	r2, r0, r2
   d5a1e:	ea81 0303 	eor.w	r3, r1, r3
   d5a22:	ea82 0000 	eor.w	r0, r2, r0
   d5a26:	ea83 0101 	eor.w	r1, r3, r1
   d5a2a:	ea80 0202 	eor.w	r2, r0, r2
   d5a2e:	ea81 0303 	eor.w	r3, r1, r3
   d5a32:	2d36      	cmp	r5, #54	; 0x36
   d5a34:	bf88      	it	hi
   d5a36:	bd30      	pophi	{r4, r5, pc}
   d5a38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5a3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5a40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5a44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5a48:	d002      	beq.n	d5a50 <__adddf3+0x70>
   d5a4a:	4240      	negs	r0, r0
   d5a4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5a50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5a54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5a58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5a5c:	d002      	beq.n	d5a64 <__adddf3+0x84>
   d5a5e:	4252      	negs	r2, r2
   d5a60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5a64:	ea94 0f05 	teq	r4, r5
   d5a68:	f000 80a7 	beq.w	d5bba <__adddf3+0x1da>
   d5a6c:	f1a4 0401 	sub.w	r4, r4, #1
   d5a70:	f1d5 0e20 	rsbs	lr, r5, #32
   d5a74:	db0d      	blt.n	d5a92 <__adddf3+0xb2>
   d5a76:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5a7a:	fa22 f205 	lsr.w	r2, r2, r5
   d5a7e:	1880      	adds	r0, r0, r2
   d5a80:	f141 0100 	adc.w	r1, r1, #0
   d5a84:	fa03 f20e 	lsl.w	r2, r3, lr
   d5a88:	1880      	adds	r0, r0, r2
   d5a8a:	fa43 f305 	asr.w	r3, r3, r5
   d5a8e:	4159      	adcs	r1, r3
   d5a90:	e00e      	b.n	d5ab0 <__adddf3+0xd0>
   d5a92:	f1a5 0520 	sub.w	r5, r5, #32
   d5a96:	f10e 0e20 	add.w	lr, lr, #32
   d5a9a:	2a01      	cmp	r2, #1
   d5a9c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5aa0:	bf28      	it	cs
   d5aa2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5aa6:	fa43 f305 	asr.w	r3, r3, r5
   d5aaa:	18c0      	adds	r0, r0, r3
   d5aac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ab4:	d507      	bpl.n	d5ac6 <__adddf3+0xe6>
   d5ab6:	f04f 0e00 	mov.w	lr, #0
   d5aba:	f1dc 0c00 	rsbs	ip, ip, #0
   d5abe:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5ac2:	eb6e 0101 	sbc.w	r1, lr, r1
   d5ac6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5aca:	d31b      	bcc.n	d5b04 <__adddf3+0x124>
   d5acc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5ad0:	d30c      	bcc.n	d5aec <__adddf3+0x10c>
   d5ad2:	0849      	lsrs	r1, r1, #1
   d5ad4:	ea5f 0030 	movs.w	r0, r0, rrx
   d5ad8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5adc:	f104 0401 	add.w	r4, r4, #1
   d5ae0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5ae4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5ae8:	f080 809a 	bcs.w	d5c20 <__adddf3+0x240>
   d5aec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5af0:	bf08      	it	eq
   d5af2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5af6:	f150 0000 	adcs.w	r0, r0, #0
   d5afa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5afe:	ea41 0105 	orr.w	r1, r1, r5
   d5b02:	bd30      	pop	{r4, r5, pc}
   d5b04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5b08:	4140      	adcs	r0, r0
   d5b0a:	eb41 0101 	adc.w	r1, r1, r1
   d5b0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5b12:	f1a4 0401 	sub.w	r4, r4, #1
   d5b16:	d1e9      	bne.n	d5aec <__adddf3+0x10c>
   d5b18:	f091 0f00 	teq	r1, #0
   d5b1c:	bf04      	itt	eq
   d5b1e:	4601      	moveq	r1, r0
   d5b20:	2000      	moveq	r0, #0
   d5b22:	fab1 f381 	clz	r3, r1
   d5b26:	bf08      	it	eq
   d5b28:	3320      	addeq	r3, #32
   d5b2a:	f1a3 030b 	sub.w	r3, r3, #11
   d5b2e:	f1b3 0220 	subs.w	r2, r3, #32
   d5b32:	da0c      	bge.n	d5b4e <__adddf3+0x16e>
   d5b34:	320c      	adds	r2, #12
   d5b36:	dd08      	ble.n	d5b4a <__adddf3+0x16a>
   d5b38:	f102 0c14 	add.w	ip, r2, #20
   d5b3c:	f1c2 020c 	rsb	r2, r2, #12
   d5b40:	fa01 f00c 	lsl.w	r0, r1, ip
   d5b44:	fa21 f102 	lsr.w	r1, r1, r2
   d5b48:	e00c      	b.n	d5b64 <__adddf3+0x184>
   d5b4a:	f102 0214 	add.w	r2, r2, #20
   d5b4e:	bfd8      	it	le
   d5b50:	f1c2 0c20 	rsble	ip, r2, #32
   d5b54:	fa01 f102 	lsl.w	r1, r1, r2
   d5b58:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5b5c:	bfdc      	itt	le
   d5b5e:	ea41 010c 	orrle.w	r1, r1, ip
   d5b62:	4090      	lslle	r0, r2
   d5b64:	1ae4      	subs	r4, r4, r3
   d5b66:	bfa2      	ittt	ge
   d5b68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5b6c:	4329      	orrge	r1, r5
   d5b6e:	bd30      	popge	{r4, r5, pc}
   d5b70:	ea6f 0404 	mvn.w	r4, r4
   d5b74:	3c1f      	subs	r4, #31
   d5b76:	da1c      	bge.n	d5bb2 <__adddf3+0x1d2>
   d5b78:	340c      	adds	r4, #12
   d5b7a:	dc0e      	bgt.n	d5b9a <__adddf3+0x1ba>
   d5b7c:	f104 0414 	add.w	r4, r4, #20
   d5b80:	f1c4 0220 	rsb	r2, r4, #32
   d5b84:	fa20 f004 	lsr.w	r0, r0, r4
   d5b88:	fa01 f302 	lsl.w	r3, r1, r2
   d5b8c:	ea40 0003 	orr.w	r0, r0, r3
   d5b90:	fa21 f304 	lsr.w	r3, r1, r4
   d5b94:	ea45 0103 	orr.w	r1, r5, r3
   d5b98:	bd30      	pop	{r4, r5, pc}
   d5b9a:	f1c4 040c 	rsb	r4, r4, #12
   d5b9e:	f1c4 0220 	rsb	r2, r4, #32
   d5ba2:	fa20 f002 	lsr.w	r0, r0, r2
   d5ba6:	fa01 f304 	lsl.w	r3, r1, r4
   d5baa:	ea40 0003 	orr.w	r0, r0, r3
   d5bae:	4629      	mov	r1, r5
   d5bb0:	bd30      	pop	{r4, r5, pc}
   d5bb2:	fa21 f004 	lsr.w	r0, r1, r4
   d5bb6:	4629      	mov	r1, r5
   d5bb8:	bd30      	pop	{r4, r5, pc}
   d5bba:	f094 0f00 	teq	r4, #0
   d5bbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5bc2:	bf06      	itte	eq
   d5bc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5bc8:	3401      	addeq	r4, #1
   d5bca:	3d01      	subne	r5, #1
   d5bcc:	e74e      	b.n	d5a6c <__adddf3+0x8c>
   d5bce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5bd2:	bf18      	it	ne
   d5bd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5bd8:	d029      	beq.n	d5c2e <__adddf3+0x24e>
   d5bda:	ea94 0f05 	teq	r4, r5
   d5bde:	bf08      	it	eq
   d5be0:	ea90 0f02 	teqeq	r0, r2
   d5be4:	d005      	beq.n	d5bf2 <__adddf3+0x212>
   d5be6:	ea54 0c00 	orrs.w	ip, r4, r0
   d5bea:	bf04      	itt	eq
   d5bec:	4619      	moveq	r1, r3
   d5bee:	4610      	moveq	r0, r2
   d5bf0:	bd30      	pop	{r4, r5, pc}
   d5bf2:	ea91 0f03 	teq	r1, r3
   d5bf6:	bf1e      	ittt	ne
   d5bf8:	2100      	movne	r1, #0
   d5bfa:	2000      	movne	r0, #0
   d5bfc:	bd30      	popne	{r4, r5, pc}
   d5bfe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5c02:	d105      	bne.n	d5c10 <__adddf3+0x230>
   d5c04:	0040      	lsls	r0, r0, #1
   d5c06:	4149      	adcs	r1, r1
   d5c08:	bf28      	it	cs
   d5c0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5c0e:	bd30      	pop	{r4, r5, pc}
   d5c10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5c14:	bf3c      	itt	cc
   d5c16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5c1a:	bd30      	popcc	{r4, r5, pc}
   d5c1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5c24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5c28:	f04f 0000 	mov.w	r0, #0
   d5c2c:	bd30      	pop	{r4, r5, pc}
   d5c2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5c32:	bf1a      	itte	ne
   d5c34:	4619      	movne	r1, r3
   d5c36:	4610      	movne	r0, r2
   d5c38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5c3c:	bf1c      	itt	ne
   d5c3e:	460b      	movne	r3, r1
   d5c40:	4602      	movne	r2, r0
   d5c42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5c46:	bf06      	itte	eq
   d5c48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5c4c:	ea91 0f03 	teqeq	r1, r3
   d5c50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5c54:	bd30      	pop	{r4, r5, pc}
   d5c56:	bf00      	nop

000d5c58 <__aeabi_ui2d>:
   d5c58:	f090 0f00 	teq	r0, #0
   d5c5c:	bf04      	itt	eq
   d5c5e:	2100      	moveq	r1, #0
   d5c60:	4770      	bxeq	lr
   d5c62:	b530      	push	{r4, r5, lr}
   d5c64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5c68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5c6c:	f04f 0500 	mov.w	r5, #0
   d5c70:	f04f 0100 	mov.w	r1, #0
   d5c74:	e750      	b.n	d5b18 <__adddf3+0x138>
   d5c76:	bf00      	nop

000d5c78 <__aeabi_i2d>:
   d5c78:	f090 0f00 	teq	r0, #0
   d5c7c:	bf04      	itt	eq
   d5c7e:	2100      	moveq	r1, #0
   d5c80:	4770      	bxeq	lr
   d5c82:	b530      	push	{r4, r5, lr}
   d5c84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5c88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5c8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5c90:	bf48      	it	mi
   d5c92:	4240      	negmi	r0, r0
   d5c94:	f04f 0100 	mov.w	r1, #0
   d5c98:	e73e      	b.n	d5b18 <__adddf3+0x138>
   d5c9a:	bf00      	nop

000d5c9c <__aeabi_f2d>:
   d5c9c:	0042      	lsls	r2, r0, #1
   d5c9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ca2:	ea4f 0131 	mov.w	r1, r1, rrx
   d5ca6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5caa:	bf1f      	itttt	ne
   d5cac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5cb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5cb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5cb8:	4770      	bxne	lr
   d5cba:	f092 0f00 	teq	r2, #0
   d5cbe:	bf14      	ite	ne
   d5cc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5cc4:	4770      	bxeq	lr
   d5cc6:	b530      	push	{r4, r5, lr}
   d5cc8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5cd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5cd4:	e720      	b.n	d5b18 <__adddf3+0x138>
   d5cd6:	bf00      	nop

000d5cd8 <__aeabi_ul2d>:
   d5cd8:	ea50 0201 	orrs.w	r2, r0, r1
   d5cdc:	bf08      	it	eq
   d5cde:	4770      	bxeq	lr
   d5ce0:	b530      	push	{r4, r5, lr}
   d5ce2:	f04f 0500 	mov.w	r5, #0
   d5ce6:	e00a      	b.n	d5cfe <__aeabi_l2d+0x16>

000d5ce8 <__aeabi_l2d>:
   d5ce8:	ea50 0201 	orrs.w	r2, r0, r1
   d5cec:	bf08      	it	eq
   d5cee:	4770      	bxeq	lr
   d5cf0:	b530      	push	{r4, r5, lr}
   d5cf2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5cf6:	d502      	bpl.n	d5cfe <__aeabi_l2d+0x16>
   d5cf8:	4240      	negs	r0, r0
   d5cfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5cfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5d02:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5d06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5d0a:	f43f aedc 	beq.w	d5ac6 <__adddf3+0xe6>
   d5d0e:	f04f 0203 	mov.w	r2, #3
   d5d12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5d16:	bf18      	it	ne
   d5d18:	3203      	addne	r2, #3
   d5d1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5d1e:	bf18      	it	ne
   d5d20:	3203      	addne	r2, #3
   d5d22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5d26:	f1c2 0320 	rsb	r3, r2, #32
   d5d2a:	fa00 fc03 	lsl.w	ip, r0, r3
   d5d2e:	fa20 f002 	lsr.w	r0, r0, r2
   d5d32:	fa01 fe03 	lsl.w	lr, r1, r3
   d5d36:	ea40 000e 	orr.w	r0, r0, lr
   d5d3a:	fa21 f102 	lsr.w	r1, r1, r2
   d5d3e:	4414      	add	r4, r2
   d5d40:	e6c1      	b.n	d5ac6 <__adddf3+0xe6>
   d5d42:	bf00      	nop

000d5d44 <__aeabi_dmul>:
   d5d44:	b570      	push	{r4, r5, r6, lr}
   d5d46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5d4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5d4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5d52:	bf1d      	ittte	ne
   d5d54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5d58:	ea94 0f0c 	teqne	r4, ip
   d5d5c:	ea95 0f0c 	teqne	r5, ip
   d5d60:	f000 f8de 	bleq	d5f20 <__aeabi_dmul+0x1dc>
   d5d64:	442c      	add	r4, r5
   d5d66:	ea81 0603 	eor.w	r6, r1, r3
   d5d6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5d6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5d72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5d76:	bf18      	it	ne
   d5d78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5d7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5d84:	d038      	beq.n	d5df8 <__aeabi_dmul+0xb4>
   d5d86:	fba0 ce02 	umull	ip, lr, r0, r2
   d5d8a:	f04f 0500 	mov.w	r5, #0
   d5d8e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5d92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5d96:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5d9a:	f04f 0600 	mov.w	r6, #0
   d5d9e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5da2:	f09c 0f00 	teq	ip, #0
   d5da6:	bf18      	it	ne
   d5da8:	f04e 0e01 	orrne.w	lr, lr, #1
   d5dac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5db0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5db4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5db8:	d204      	bcs.n	d5dc4 <__aeabi_dmul+0x80>
   d5dba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5dbe:	416d      	adcs	r5, r5
   d5dc0:	eb46 0606 	adc.w	r6, r6, r6
   d5dc4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5dc8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5dcc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5dd0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5dd4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5dd8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ddc:	bf88      	it	hi
   d5dde:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5de2:	d81e      	bhi.n	d5e22 <__aeabi_dmul+0xde>
   d5de4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5de8:	bf08      	it	eq
   d5dea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5dee:	f150 0000 	adcs.w	r0, r0, #0
   d5df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5df6:	bd70      	pop	{r4, r5, r6, pc}
   d5df8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5dfc:	ea46 0101 	orr.w	r1, r6, r1
   d5e00:	ea40 0002 	orr.w	r0, r0, r2
   d5e04:	ea81 0103 	eor.w	r1, r1, r3
   d5e08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5e0c:	bfc2      	ittt	gt
   d5e0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5e12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5e16:	bd70      	popgt	{r4, r5, r6, pc}
   d5e18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e1c:	f04f 0e00 	mov.w	lr, #0
   d5e20:	3c01      	subs	r4, #1
   d5e22:	f300 80ab 	bgt.w	d5f7c <__aeabi_dmul+0x238>
   d5e26:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5e2a:	bfde      	ittt	le
   d5e2c:	2000      	movle	r0, #0
   d5e2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5e32:	bd70      	pople	{r4, r5, r6, pc}
   d5e34:	f1c4 0400 	rsb	r4, r4, #0
   d5e38:	3c20      	subs	r4, #32
   d5e3a:	da35      	bge.n	d5ea8 <__aeabi_dmul+0x164>
   d5e3c:	340c      	adds	r4, #12
   d5e3e:	dc1b      	bgt.n	d5e78 <__aeabi_dmul+0x134>
   d5e40:	f104 0414 	add.w	r4, r4, #20
   d5e44:	f1c4 0520 	rsb	r5, r4, #32
   d5e48:	fa00 f305 	lsl.w	r3, r0, r5
   d5e4c:	fa20 f004 	lsr.w	r0, r0, r4
   d5e50:	fa01 f205 	lsl.w	r2, r1, r5
   d5e54:	ea40 0002 	orr.w	r0, r0, r2
   d5e58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5e5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5e60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5e64:	fa21 f604 	lsr.w	r6, r1, r4
   d5e68:	eb42 0106 	adc.w	r1, r2, r6
   d5e6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5e70:	bf08      	it	eq
   d5e72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5e76:	bd70      	pop	{r4, r5, r6, pc}
   d5e78:	f1c4 040c 	rsb	r4, r4, #12
   d5e7c:	f1c4 0520 	rsb	r5, r4, #32
   d5e80:	fa00 f304 	lsl.w	r3, r0, r4
   d5e84:	fa20 f005 	lsr.w	r0, r0, r5
   d5e88:	fa01 f204 	lsl.w	r2, r1, r4
   d5e8c:	ea40 0002 	orr.w	r0, r0, r2
   d5e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5e94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5e98:	f141 0100 	adc.w	r1, r1, #0
   d5e9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ea0:	bf08      	it	eq
   d5ea2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5ea6:	bd70      	pop	{r4, r5, r6, pc}
   d5ea8:	f1c4 0520 	rsb	r5, r4, #32
   d5eac:	fa00 f205 	lsl.w	r2, r0, r5
   d5eb0:	ea4e 0e02 	orr.w	lr, lr, r2
   d5eb4:	fa20 f304 	lsr.w	r3, r0, r4
   d5eb8:	fa01 f205 	lsl.w	r2, r1, r5
   d5ebc:	ea43 0302 	orr.w	r3, r3, r2
   d5ec0:	fa21 f004 	lsr.w	r0, r1, r4
   d5ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ec8:	fa21 f204 	lsr.w	r2, r1, r4
   d5ecc:	ea20 0002 	bic.w	r0, r0, r2
   d5ed0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5ed4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ed8:	bf08      	it	eq
   d5eda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5ede:	bd70      	pop	{r4, r5, r6, pc}
   d5ee0:	f094 0f00 	teq	r4, #0
   d5ee4:	d10f      	bne.n	d5f06 <__aeabi_dmul+0x1c2>
   d5ee6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5eea:	0040      	lsls	r0, r0, #1
   d5eec:	eb41 0101 	adc.w	r1, r1, r1
   d5ef0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ef4:	bf08      	it	eq
   d5ef6:	3c01      	subeq	r4, #1
   d5ef8:	d0f7      	beq.n	d5eea <__aeabi_dmul+0x1a6>
   d5efa:	ea41 0106 	orr.w	r1, r1, r6
   d5efe:	f095 0f00 	teq	r5, #0
   d5f02:	bf18      	it	ne
   d5f04:	4770      	bxne	lr
   d5f06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5f0a:	0052      	lsls	r2, r2, #1
   d5f0c:	eb43 0303 	adc.w	r3, r3, r3
   d5f10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5f14:	bf08      	it	eq
   d5f16:	3d01      	subeq	r5, #1
   d5f18:	d0f7      	beq.n	d5f0a <__aeabi_dmul+0x1c6>
   d5f1a:	ea43 0306 	orr.w	r3, r3, r6
   d5f1e:	4770      	bx	lr
   d5f20:	ea94 0f0c 	teq	r4, ip
   d5f24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5f28:	bf18      	it	ne
   d5f2a:	ea95 0f0c 	teqne	r5, ip
   d5f2e:	d00c      	beq.n	d5f4a <__aeabi_dmul+0x206>
   d5f30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f34:	bf18      	it	ne
   d5f36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f3a:	d1d1      	bne.n	d5ee0 <__aeabi_dmul+0x19c>
   d5f3c:	ea81 0103 	eor.w	r1, r1, r3
   d5f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5f44:	f04f 0000 	mov.w	r0, #0
   d5f48:	bd70      	pop	{r4, r5, r6, pc}
   d5f4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f4e:	bf06      	itte	eq
   d5f50:	4610      	moveq	r0, r2
   d5f52:	4619      	moveq	r1, r3
   d5f54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f58:	d019      	beq.n	d5f8e <__aeabi_dmul+0x24a>
   d5f5a:	ea94 0f0c 	teq	r4, ip
   d5f5e:	d102      	bne.n	d5f66 <__aeabi_dmul+0x222>
   d5f60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5f64:	d113      	bne.n	d5f8e <__aeabi_dmul+0x24a>
   d5f66:	ea95 0f0c 	teq	r5, ip
   d5f6a:	d105      	bne.n	d5f78 <__aeabi_dmul+0x234>
   d5f6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5f70:	bf1c      	itt	ne
   d5f72:	4610      	movne	r0, r2
   d5f74:	4619      	movne	r1, r3
   d5f76:	d10a      	bne.n	d5f8e <__aeabi_dmul+0x24a>
   d5f78:	ea81 0103 	eor.w	r1, r1, r3
   d5f7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5f80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5f84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5f88:	f04f 0000 	mov.w	r0, #0
   d5f8c:	bd70      	pop	{r4, r5, r6, pc}
   d5f8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5f92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5f96:	bd70      	pop	{r4, r5, r6, pc}

000d5f98 <__aeabi_ddiv>:
   d5f98:	b570      	push	{r4, r5, r6, lr}
   d5f9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5f9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5fa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5fa6:	bf1d      	ittte	ne
   d5fa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5fac:	ea94 0f0c 	teqne	r4, ip
   d5fb0:	ea95 0f0c 	teqne	r5, ip
   d5fb4:	f000 f8a7 	bleq	d6106 <__aeabi_ddiv+0x16e>
   d5fb8:	eba4 0405 	sub.w	r4, r4, r5
   d5fbc:	ea81 0e03 	eor.w	lr, r1, r3
   d5fc0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5fc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5fc8:	f000 8088 	beq.w	d60dc <__aeabi_ddiv+0x144>
   d5fcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5fd0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5fd4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5fd8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5fdc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5fe0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5fe4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5fe8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5fec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5ff0:	429d      	cmp	r5, r3
   d5ff2:	bf08      	it	eq
   d5ff4:	4296      	cmpeq	r6, r2
   d5ff6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5ffa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5ffe:	d202      	bcs.n	d6006 <__aeabi_ddiv+0x6e>
   d6000:	085b      	lsrs	r3, r3, #1
   d6002:	ea4f 0232 	mov.w	r2, r2, rrx
   d6006:	1ab6      	subs	r6, r6, r2
   d6008:	eb65 0503 	sbc.w	r5, r5, r3
   d600c:	085b      	lsrs	r3, r3, #1
   d600e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6012:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6016:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d601a:	ebb6 0e02 	subs.w	lr, r6, r2
   d601e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6022:	bf22      	ittt	cs
   d6024:	1ab6      	subcs	r6, r6, r2
   d6026:	4675      	movcs	r5, lr
   d6028:	ea40 000c 	orrcs.w	r0, r0, ip
   d602c:	085b      	lsrs	r3, r3, #1
   d602e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6032:	ebb6 0e02 	subs.w	lr, r6, r2
   d6036:	eb75 0e03 	sbcs.w	lr, r5, r3
   d603a:	bf22      	ittt	cs
   d603c:	1ab6      	subcs	r6, r6, r2
   d603e:	4675      	movcs	r5, lr
   d6040:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6044:	085b      	lsrs	r3, r3, #1
   d6046:	ea4f 0232 	mov.w	r2, r2, rrx
   d604a:	ebb6 0e02 	subs.w	lr, r6, r2
   d604e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6052:	bf22      	ittt	cs
   d6054:	1ab6      	subcs	r6, r6, r2
   d6056:	4675      	movcs	r5, lr
   d6058:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d605c:	085b      	lsrs	r3, r3, #1
   d605e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6062:	ebb6 0e02 	subs.w	lr, r6, r2
   d6066:	eb75 0e03 	sbcs.w	lr, r5, r3
   d606a:	bf22      	ittt	cs
   d606c:	1ab6      	subcs	r6, r6, r2
   d606e:	4675      	movcs	r5, lr
   d6070:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6074:	ea55 0e06 	orrs.w	lr, r5, r6
   d6078:	d018      	beq.n	d60ac <__aeabi_ddiv+0x114>
   d607a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d607e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6082:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6086:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d608a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d608e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6092:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6096:	d1c0      	bne.n	d601a <__aeabi_ddiv+0x82>
   d6098:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d609c:	d10b      	bne.n	d60b6 <__aeabi_ddiv+0x11e>
   d609e:	ea41 0100 	orr.w	r1, r1, r0
   d60a2:	f04f 0000 	mov.w	r0, #0
   d60a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d60aa:	e7b6      	b.n	d601a <__aeabi_ddiv+0x82>
   d60ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d60b0:	bf04      	itt	eq
   d60b2:	4301      	orreq	r1, r0
   d60b4:	2000      	moveq	r0, #0
   d60b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d60ba:	bf88      	it	hi
   d60bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d60c0:	f63f aeaf 	bhi.w	d5e22 <__aeabi_dmul+0xde>
   d60c4:	ebb5 0c03 	subs.w	ip, r5, r3
   d60c8:	bf04      	itt	eq
   d60ca:	ebb6 0c02 	subseq.w	ip, r6, r2
   d60ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d60d2:	f150 0000 	adcs.w	r0, r0, #0
   d60d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60da:	bd70      	pop	{r4, r5, r6, pc}
   d60dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d60e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d60e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d60e8:	bfc2      	ittt	gt
   d60ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d60ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d60f2:	bd70      	popgt	{r4, r5, r6, pc}
   d60f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d60f8:	f04f 0e00 	mov.w	lr, #0
   d60fc:	3c01      	subs	r4, #1
   d60fe:	e690      	b.n	d5e22 <__aeabi_dmul+0xde>
   d6100:	ea45 0e06 	orr.w	lr, r5, r6
   d6104:	e68d      	b.n	d5e22 <__aeabi_dmul+0xde>
   d6106:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d610a:	ea94 0f0c 	teq	r4, ip
   d610e:	bf08      	it	eq
   d6110:	ea95 0f0c 	teqeq	r5, ip
   d6114:	f43f af3b 	beq.w	d5f8e <__aeabi_dmul+0x24a>
   d6118:	ea94 0f0c 	teq	r4, ip
   d611c:	d10a      	bne.n	d6134 <__aeabi_ddiv+0x19c>
   d611e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6122:	f47f af34 	bne.w	d5f8e <__aeabi_dmul+0x24a>
   d6126:	ea95 0f0c 	teq	r5, ip
   d612a:	f47f af25 	bne.w	d5f78 <__aeabi_dmul+0x234>
   d612e:	4610      	mov	r0, r2
   d6130:	4619      	mov	r1, r3
   d6132:	e72c      	b.n	d5f8e <__aeabi_dmul+0x24a>
   d6134:	ea95 0f0c 	teq	r5, ip
   d6138:	d106      	bne.n	d6148 <__aeabi_ddiv+0x1b0>
   d613a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d613e:	f43f aefd 	beq.w	d5f3c <__aeabi_dmul+0x1f8>
   d6142:	4610      	mov	r0, r2
   d6144:	4619      	mov	r1, r3
   d6146:	e722      	b.n	d5f8e <__aeabi_dmul+0x24a>
   d6148:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d614c:	bf18      	it	ne
   d614e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6152:	f47f aec5 	bne.w	d5ee0 <__aeabi_dmul+0x19c>
   d6156:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d615a:	f47f af0d 	bne.w	d5f78 <__aeabi_dmul+0x234>
   d615e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6162:	f47f aeeb 	bne.w	d5f3c <__aeabi_dmul+0x1f8>
   d6166:	e712      	b.n	d5f8e <__aeabi_dmul+0x24a>

000d6168 <__gedf2>:
   d6168:	f04f 3cff 	mov.w	ip, #4294967295
   d616c:	e006      	b.n	d617c <__cmpdf2+0x4>
   d616e:	bf00      	nop

000d6170 <__ledf2>:
   d6170:	f04f 0c01 	mov.w	ip, #1
   d6174:	e002      	b.n	d617c <__cmpdf2+0x4>
   d6176:	bf00      	nop

000d6178 <__cmpdf2>:
   d6178:	f04f 0c01 	mov.w	ip, #1
   d617c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6180:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6184:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6188:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d618c:	bf18      	it	ne
   d618e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6192:	d01b      	beq.n	d61cc <__cmpdf2+0x54>
   d6194:	b001      	add	sp, #4
   d6196:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d619a:	bf0c      	ite	eq
   d619c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d61a0:	ea91 0f03 	teqne	r1, r3
   d61a4:	bf02      	ittt	eq
   d61a6:	ea90 0f02 	teqeq	r0, r2
   d61aa:	2000      	moveq	r0, #0
   d61ac:	4770      	bxeq	lr
   d61ae:	f110 0f00 	cmn.w	r0, #0
   d61b2:	ea91 0f03 	teq	r1, r3
   d61b6:	bf58      	it	pl
   d61b8:	4299      	cmppl	r1, r3
   d61ba:	bf08      	it	eq
   d61bc:	4290      	cmpeq	r0, r2
   d61be:	bf2c      	ite	cs
   d61c0:	17d8      	asrcs	r0, r3, #31
   d61c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d61c6:	f040 0001 	orr.w	r0, r0, #1
   d61ca:	4770      	bx	lr
   d61cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d61d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d61d4:	d102      	bne.n	d61dc <__cmpdf2+0x64>
   d61d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d61da:	d107      	bne.n	d61ec <__cmpdf2+0x74>
   d61dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d61e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d61e4:	d1d6      	bne.n	d6194 <__cmpdf2+0x1c>
   d61e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d61ea:	d0d3      	beq.n	d6194 <__cmpdf2+0x1c>
   d61ec:	f85d 0b04 	ldr.w	r0, [sp], #4
   d61f0:	4770      	bx	lr
   d61f2:	bf00      	nop

000d61f4 <__aeabi_cdrcmple>:
   d61f4:	4684      	mov	ip, r0
   d61f6:	4610      	mov	r0, r2
   d61f8:	4662      	mov	r2, ip
   d61fa:	468c      	mov	ip, r1
   d61fc:	4619      	mov	r1, r3
   d61fe:	4663      	mov	r3, ip
   d6200:	e000      	b.n	d6204 <__aeabi_cdcmpeq>
   d6202:	bf00      	nop

000d6204 <__aeabi_cdcmpeq>:
   d6204:	b501      	push	{r0, lr}
   d6206:	f7ff ffb7 	bl	d6178 <__cmpdf2>
   d620a:	2800      	cmp	r0, #0
   d620c:	bf48      	it	mi
   d620e:	f110 0f00 	cmnmi.w	r0, #0
   d6212:	bd01      	pop	{r0, pc}

000d6214 <__aeabi_dcmpeq>:
   d6214:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6218:	f7ff fff4 	bl	d6204 <__aeabi_cdcmpeq>
   d621c:	bf0c      	ite	eq
   d621e:	2001      	moveq	r0, #1
   d6220:	2000      	movne	r0, #0
   d6222:	f85d fb08 	ldr.w	pc, [sp], #8
   d6226:	bf00      	nop

000d6228 <__aeabi_dcmplt>:
   d6228:	f84d ed08 	str.w	lr, [sp, #-8]!
   d622c:	f7ff ffea 	bl	d6204 <__aeabi_cdcmpeq>
   d6230:	bf34      	ite	cc
   d6232:	2001      	movcc	r0, #1
   d6234:	2000      	movcs	r0, #0
   d6236:	f85d fb08 	ldr.w	pc, [sp], #8
   d623a:	bf00      	nop

000d623c <__aeabi_dcmple>:
   d623c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6240:	f7ff ffe0 	bl	d6204 <__aeabi_cdcmpeq>
   d6244:	bf94      	ite	ls
   d6246:	2001      	movls	r0, #1
   d6248:	2000      	movhi	r0, #0
   d624a:	f85d fb08 	ldr.w	pc, [sp], #8
   d624e:	bf00      	nop

000d6250 <__aeabi_dcmpge>:
   d6250:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6254:	f7ff ffce 	bl	d61f4 <__aeabi_cdrcmple>
   d6258:	bf94      	ite	ls
   d625a:	2001      	movls	r0, #1
   d625c:	2000      	movhi	r0, #0
   d625e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6262:	bf00      	nop

000d6264 <__aeabi_dcmpgt>:
   d6264:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6268:	f7ff ffc4 	bl	d61f4 <__aeabi_cdrcmple>
   d626c:	bf34      	ite	cc
   d626e:	2001      	movcc	r0, #1
   d6270:	2000      	movcs	r0, #0
   d6272:	f85d fb08 	ldr.w	pc, [sp], #8
   d6276:	bf00      	nop

000d6278 <__aeabi_dcmpun>:
   d6278:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d627c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6280:	d102      	bne.n	d6288 <__aeabi_dcmpun+0x10>
   d6282:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6286:	d10a      	bne.n	d629e <__aeabi_dcmpun+0x26>
   d6288:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d628c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6290:	d102      	bne.n	d6298 <__aeabi_dcmpun+0x20>
   d6292:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6296:	d102      	bne.n	d629e <__aeabi_dcmpun+0x26>
   d6298:	f04f 0000 	mov.w	r0, #0
   d629c:	4770      	bx	lr
   d629e:	f04f 0001 	mov.w	r0, #1
   d62a2:	4770      	bx	lr

000d62a4 <__aeabi_d2iz>:
   d62a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d62a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d62ac:	d215      	bcs.n	d62da <__aeabi_d2iz+0x36>
   d62ae:	d511      	bpl.n	d62d4 <__aeabi_d2iz+0x30>
   d62b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d62b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d62b8:	d912      	bls.n	d62e0 <__aeabi_d2iz+0x3c>
   d62ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d62be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d62c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d62c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d62ca:	fa23 f002 	lsr.w	r0, r3, r2
   d62ce:	bf18      	it	ne
   d62d0:	4240      	negne	r0, r0
   d62d2:	4770      	bx	lr
   d62d4:	f04f 0000 	mov.w	r0, #0
   d62d8:	4770      	bx	lr
   d62da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d62de:	d105      	bne.n	d62ec <__aeabi_d2iz+0x48>
   d62e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d62e4:	bf08      	it	eq
   d62e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d62ea:	4770      	bx	lr
   d62ec:	f04f 0000 	mov.w	r0, #0
   d62f0:	4770      	bx	lr
   d62f2:	bf00      	nop

000d62f4 <__aeabi_d2uiz>:
   d62f4:	004a      	lsls	r2, r1, #1
   d62f6:	d211      	bcs.n	d631c <__aeabi_d2uiz+0x28>
   d62f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d62fc:	d211      	bcs.n	d6322 <__aeabi_d2uiz+0x2e>
   d62fe:	d50d      	bpl.n	d631c <__aeabi_d2uiz+0x28>
   d6300:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6304:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6308:	d40e      	bmi.n	d6328 <__aeabi_d2uiz+0x34>
   d630a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d630e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6312:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6316:	fa23 f002 	lsr.w	r0, r3, r2
   d631a:	4770      	bx	lr
   d631c:	f04f 0000 	mov.w	r0, #0
   d6320:	4770      	bx	lr
   d6322:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6326:	d102      	bne.n	d632e <__aeabi_d2uiz+0x3a>
   d6328:	f04f 30ff 	mov.w	r0, #4294967295
   d632c:	4770      	bx	lr
   d632e:	f04f 0000 	mov.w	r0, #0
   d6332:	4770      	bx	lr

000d6334 <__aeabi_d2f>:
   d6334:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6338:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d633c:	bf24      	itt	cs
   d633e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6342:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6346:	d90d      	bls.n	d6364 <__aeabi_d2f+0x30>
   d6348:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d634c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6350:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6354:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6358:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d635c:	bf08      	it	eq
   d635e:	f020 0001 	biceq.w	r0, r0, #1
   d6362:	4770      	bx	lr
   d6364:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6368:	d121      	bne.n	d63ae <__aeabi_d2f+0x7a>
   d636a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d636e:	bfbc      	itt	lt
   d6370:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6374:	4770      	bxlt	lr
   d6376:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d637a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d637e:	f1c2 0218 	rsb	r2, r2, #24
   d6382:	f1c2 0c20 	rsb	ip, r2, #32
   d6386:	fa10 f30c 	lsls.w	r3, r0, ip
   d638a:	fa20 f002 	lsr.w	r0, r0, r2
   d638e:	bf18      	it	ne
   d6390:	f040 0001 	orrne.w	r0, r0, #1
   d6394:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6398:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d639c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d63a0:	ea40 000c 	orr.w	r0, r0, ip
   d63a4:	fa23 f302 	lsr.w	r3, r3, r2
   d63a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d63ac:	e7cc      	b.n	d6348 <__aeabi_d2f+0x14>
   d63ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d63b2:	d107      	bne.n	d63c4 <__aeabi_d2f+0x90>
   d63b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d63b8:	bf1e      	ittt	ne
   d63ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d63be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d63c2:	4770      	bxne	lr
   d63c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d63c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d63cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d63d0:	4770      	bx	lr
   d63d2:	bf00      	nop

000d63d4 <__cxa_atexit>:
   d63d4:	b510      	push	{r4, lr}
   d63d6:	4c05      	ldr	r4, [pc, #20]	; (d63ec <__cxa_atexit+0x18>)
   d63d8:	4613      	mov	r3, r2
   d63da:	b12c      	cbz	r4, d63e8 <__cxa_atexit+0x14>
   d63dc:	460a      	mov	r2, r1
   d63de:	4601      	mov	r1, r0
   d63e0:	2002      	movs	r0, #2
   d63e2:	f3af 8000 	nop.w
   d63e6:	bd10      	pop	{r4, pc}
   d63e8:	4620      	mov	r0, r4
   d63ea:	bd10      	pop	{r4, pc}
   d63ec:	00000000 	.word	0x00000000

000d63f0 <memcpy>:
   d63f0:	b510      	push	{r4, lr}
   d63f2:	1e43      	subs	r3, r0, #1
   d63f4:	440a      	add	r2, r1
   d63f6:	4291      	cmp	r1, r2
   d63f8:	d004      	beq.n	d6404 <memcpy+0x14>
   d63fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d63fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6402:	e7f8      	b.n	d63f6 <memcpy+0x6>
   d6404:	bd10      	pop	{r4, pc}

000d6406 <memset>:
   d6406:	4402      	add	r2, r0
   d6408:	4603      	mov	r3, r0
   d640a:	4293      	cmp	r3, r2
   d640c:	d002      	beq.n	d6414 <memset+0xe>
   d640e:	f803 1b01 	strb.w	r1, [r3], #1
   d6412:	e7fa      	b.n	d640a <memset+0x4>
   d6414:	4770      	bx	lr
	...

000d6418 <srand>:
   d6418:	b538      	push	{r3, r4, r5, lr}
   d641a:	4b12      	ldr	r3, [pc, #72]	; (d6464 <srand+0x4c>)
   d641c:	681c      	ldr	r4, [r3, #0]
   d641e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6420:	4605      	mov	r5, r0
   d6422:	b9d3      	cbnz	r3, d645a <srand+0x42>
   d6424:	2018      	movs	r0, #24
   d6426:	f7fe fa7b 	bl	d4920 <malloc>
   d642a:	f243 330e 	movw	r3, #13070	; 0x330e
   d642e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6430:	8003      	strh	r3, [r0, #0]
   d6432:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6436:	8043      	strh	r3, [r0, #2]
   d6438:	f241 2334 	movw	r3, #4660	; 0x1234
   d643c:	8083      	strh	r3, [r0, #4]
   d643e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6442:	80c3      	strh	r3, [r0, #6]
   d6444:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6448:	8103      	strh	r3, [r0, #8]
   d644a:	2305      	movs	r3, #5
   d644c:	8143      	strh	r3, [r0, #10]
   d644e:	230b      	movs	r3, #11
   d6450:	8183      	strh	r3, [r0, #12]
   d6452:	2201      	movs	r2, #1
   d6454:	2300      	movs	r3, #0
   d6456:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d645a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d645c:	2200      	movs	r2, #0
   d645e:	611d      	str	r5, [r3, #16]
   d6460:	615a      	str	r2, [r3, #20]
   d6462:	bd38      	pop	{r3, r4, r5, pc}
   d6464:	2003e488 	.word	0x2003e488

000d6468 <strlen>:
   d6468:	4603      	mov	r3, r0
   d646a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d646e:	2a00      	cmp	r2, #0
   d6470:	d1fb      	bne.n	d646a <strlen+0x2>
   d6472:	1a18      	subs	r0, r3, r0
   d6474:	3801      	subs	r0, #1
   d6476:	4770      	bx	lr

000d6478 <dynalib_user>:
   d6478:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6488:	0000 0000 4c56 3335 314c 2058 7751 6969     ....VL53L1X Qwii
   d6498:	2063 6554 7473 5300 6e65 6f73 2072 6166     c Test.Sensor fa
   d64a8:	6c69 6465 7420 206f 6562 6967 2e6e 5020     iled to begin. P
   d64b8:	656c 7361 2065 6863 6365 206b 6977 6972     lease check wiri
   d64c8:	676e 202e 7246 6565 697a 676e 2e2e 002e     ng. Freezing....
   d64d8:	6553 736e 726f 6f20 6c6e 6e69 2165 4400     Sensor online!.D
   d64e8:	7369 6174 636e 2865 6d6d 3a29 0020 4409     istance(mm): ..D
   d64f8:	7369 6174 636e 2865 7466 3a29 0020          istance(ft): .

000d6506 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   d6506:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   d6516:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   d6526:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   d6536:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   d6546:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   d6556:	0200 ffc7 009b 0000 0001 0000 0000          ..............

000d6564 <_ZTV7VL53L1X>:
	...
   d656c:	44a7 000d 4487 000d 4471 000d 442d 000d     .D...D..qD..-D..
   d657c:	4463 000d 4449 000d 442f 000d               cD..ID../D..

000d6588 <_ZTVN5spark13EthernetClassE>:
	...
   d6590:	499f 000d 4995 000d 498b 000d 4981 000d     .I...I...I...I..
   d65a0:	4975 000d 4969 000d 495d 000d 4955 000d     uI..iI..]I..UI..
   d65b0:	494b 000d 4941 000d 54e1 000d 616e 006e     KI..AI...T..nan.
   d65c0:	766f 0066 6e69 0066 6162 6475 5300 7265     ovf.inf.baud.Ser
   d65d0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d65e0:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d65f0:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6600:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6610:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6620:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6630:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6640:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6650:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6660:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6670:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d6680:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d6690:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d66a0:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d66b0:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d66c0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d66d0 <_ZTV9IPAddress>:
	...
   d66d8:	4e49 000d 4e39 000d 4e3b 000d               IN..9N..;N..

000d66e4 <_ZTV9USBSerial>:
	...
   d66ec:	4f21 000d 4f71 000d 4f7f 000d 4a61 000d     !O..qO...O..aJ..
   d66fc:	4f5d 000d 4f23 000d 4f39 000d 4f6b 000d     ]O..#O..9O..kO..
   d670c:	4f4f 000d 4f1d 000d                         OO...O..

000d6714 <_ZTVN5spark13CellularClassE>:
	...
   d671c:	508b 000d 5081 000d 5077 000d 502d 000d     .P...P..wP..-P..
   d672c:	506b 000d 505f 000d 5053 000d 504b 000d     kP.._P..SP..KP..
   d673c:	5041 000d 5037 000d 54e1 000d               AP..7P...T..

000d6748 <_ZTV11USARTSerial>:
	...
   d6750:	50c5 000d 5115 000d 5123 000d 4a61 000d     .P...Q..#Q..aJ..
   d6760:	50d9 000d 50fb 000d 50e7 000d 510f 000d     .P...P...P...Q..
   d6770:	50c7 000d 50cb 000d                         .P...P..

000d6778 <_ZTV7TwoWire>:
	...
   d6780:	51fd 000d 5247 000d 521f 000d 51ff 000d     .Q..GR...R...Q..
   d6790:	5227 000d 522f 000d 5237 000d 523f 000d     'R../R..7R..?R..

000d67a0 <_ZTVN5spark9MeshClassE>:
	...
   d67a8:	535d 000d 5353 000d 5349 000d 533f 000d     ]S..SS..IS..?S..
   d67b8:	5333 000d 5327 000d 531b 000d 5313 000d     3S..'S...S...S..
   d67c8:	5309 000d 52ff 000d 54e1 000d               .S...R...T..

000d67d4 <_ZTVN5spark12NetworkClassE>:
	...
   d67dc:	5479 000d 5483 000d 548d 000d 5497 000d     yT...T...T...T..
   d67ec:	54a1 000d 54ad 000d 54b9 000d 54c5 000d     .T...T...T...T..
   d67fc:	54cd 000d 54d7 000d 54e1 000d               .T...T...T..

000d6808 <_ZSt7nothrow>:
   d6808:	0000 0000                                   ....

000d680c <__sf_fake_stdin>:
	...

000d682c <__sf_fake_stdout>:
	...

000d684c <__sf_fake_stderr>:
	...
   d686c:	0043                                        C.

000d686e <link_const_variable_data_end>:
	...

000d6870 <link_constructors_location>:
   d6870:	000d41ad 	.word	0x000d41ad
   d6874:	000d41cd 	.word	0x000d41cd
   d6878:	000d4429 	.word	0x000d4429
   d687c:	000d4585 	.word	0x000d4585
   d6880:	000d49a9 	.word	0x000d49a9
   d6884:	000d49f5 	.word	0x000d49f5
   d6888:	000d4a39 	.word	0x000d4a39
   d688c:	000d4cc5 	.word	0x000d4cc5
   d6890:	000d4cd5 	.word	0x000d4cd5
   d6894:	000d4d0d 	.word	0x000d4d0d
   d6898:	000d5095 	.word	0x000d5095
   d689c:	000d5429 	.word	0x000d5429
   d68a0:	000d55ad 	.word	0x000d55ad
   d68a4:	000d5745 	.word	0x000d5745
   d68a8:	000d57c9 	.word	0x000d57c9
   d68ac:	000d588d 	.word	0x000d588d
   d68b0:	000d5951 	.word	0x000d5951

000d68b4 <link_constructors_end>:
	...
